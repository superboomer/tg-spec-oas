{
    "openapi": "3.1.0",
    "info": {
        "title": "Telegram Bot API",
        "description": "The Bot API is an HTTP-based interface created for developers keen on building bots for Telegram.\\nTo learn how to create and set up a bot, please consult [Introduction to Bots](https://core.telegram.org/bots) and [Bot FAQ](https://core.telegram.org/bots/faq).",
        "version": "9.1"
    },
    "servers": [
        {
            "url": "https://api.telegram.org/bot{token}/",
            "description": "Production Telegram Bot API server",
            "variables": {
                "token": {
                    "description": "Bot token provided by BotFather. It is used to authenticate requests to the Telegram Bot API.",
                    "default": "123456789:ABCdefGHIjklMNOpqrSTUvwxYZ"
                }
            }
        },
        {
            "url": "https://api.telegram.org/beta/bot{token}/",
            "description": "Beta Telegram Bot API server",
            "variables": {
                "token": {
                    "description": "Bot token provided by BotFather. It is used to authenticate requests to the Telegram Bot API.",
                    "default": "123456789:ABCdefGHIjklMNOpqrSTUvwxYZ"
                }
            }
        }
    ],
    "paths": {
        "/addStickerToSet": {
            "post": {
                "summary": "addStickerToSet",
                "description": "Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns True on success.",
                "operationId": "addStickerToSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "sticker": {
                                        "$ref": "#/components/schemas/InputSticker"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "name",
                                    "sticker"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/answerCallbackQuery": {
            "post": {
                "summary": "answerCallbackQuery",
                "description": "Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.",
                "operationId": "answerCallbackQuery",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "cache_time": {
                                        "type": "integer"
                                    },
                                    "callback_query_id": {
                                        "type": "string"
                                    },
                                    "show_alert": {
                                        "type": "boolean"
                                    },
                                    "text": {
                                        "type": "string"
                                    },
                                    "url": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "callback_query_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/answerInlineQuery": {
            "post": {
                "summary": "answerInlineQuery",
                "description": "Use this method to send answers to an inline query. On success, True is returned.No more than 50 results per query are allowed.",
                "operationId": "answerInlineQuery",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "button": {
                                        "$ref": "#/components/schemas/InlineQueryResultsButton"
                                    },
                                    "cache_time": {
                                        "type": "integer"
                                    },
                                    "inline_query_id": {
                                        "type": "string"
                                    },
                                    "is_personal": {
                                        "type": "boolean"
                                    },
                                    "next_offset": {
                                        "type": "string"
                                    },
                                    "results": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/InlineQueryResult"
                                        }
                                    }
                                },
                                "required": [
                                    "inline_query_id",
                                    "results"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/answerPreCheckoutQuery": {
            "post": {
                "summary": "answerPreCheckoutQuery",
                "description": "Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.",
                "operationId": "answerPreCheckoutQuery",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "error_message": {
                                        "type": "string"
                                    },
                                    "ok": {
                                        "type": "boolean"
                                    },
                                    "pre_checkout_query_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "pre_checkout_query_id",
                                    "ok"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/answerShippingQuery": {
            "post": {
                "summary": "answerShippingQuery",
                "description": "If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.",
                "operationId": "answerShippingQuery",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "error_message": {
                                        "type": "string"
                                    },
                                    "ok": {
                                        "type": "boolean"
                                    },
                                    "shipping_options": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ShippingOption"
                                        }
                                    },
                                    "shipping_query_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "shipping_query_id",
                                    "ok"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/answerWebAppQuery": {
            "post": {
                "summary": "answerWebAppQuery",
                "description": "Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned.",
                "operationId": "answerWebAppQuery",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "result": {
                                        "$ref": "#/components/schemas/InlineQueryResult"
                                    },
                                    "web_app_query_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "web_app_query_id",
                                    "result"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/SentWebAppMessage"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/approveChatJoinRequest": {
            "post": {
                "summary": "approveChatJoinRequest",
                "description": "Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.",
                "operationId": "approveChatJoinRequest",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/banChatMember": {
            "post": {
                "summary": "banChatMember",
                "description": "Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.",
                "operationId": "banChatMember",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "revoke_messages": {
                                        "type": "boolean"
                                    },
                                    "until_date": {
                                        "type": "integer"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/banChatSenderChat": {
            "post": {
                "summary": "banChatSenderChat",
                "description": "Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success.",
                "operationId": "banChatSenderChat",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "sender_chat_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "sender_chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/closeForumTopic": {
            "post": {
                "summary": "closeForumTopic",
                "description": "Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.",
                "operationId": "closeForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_thread_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/closeGeneralForumTopic": {
            "post": {
                "summary": "closeGeneralForumTopic",
                "description": "Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.",
                "operationId": "closeGeneralForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/convertGiftToStars": {
            "post": {
                "summary": "convertGiftToStars",
                "description": "Converts a given regular gift to Telegram Stars. Requires the can_convert_gifts_to_stars business bot right. Returns True on success.",
                "operationId": "convertGiftToStars",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "owned_gift_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "owned_gift_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/copyMessage": {
            "post": {
                "summary": "copyMessage",
                "description": "Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.",
                "operationId": "copyMessage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "from_chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "show_caption_above_media": {
                                        "type": "boolean"
                                    },
                                    "video_start_timestamp": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "from_chat_id",
                                    "message_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/MessageId"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/copyMessages": {
            "post": {
                "summary": "copyMessages",
                "description": "Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessages, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages. On success, an array of MessageId of the sent messages is returned.",
                "operationId": "copyMessages",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "from_chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "remove_caption": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "from_chat_id",
                                    "message_ids"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MessageId"
                                            }
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/createChatInviteLink": {
            "post": {
                "summary": "createChatInviteLink",
                "description": "Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.",
                "operationId": "createChatInviteLink",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "creates_join_request": {
                                        "type": "boolean"
                                    },
                                    "expire_date": {
                                        "type": "integer"
                                    },
                                    "member_limit": {
                                        "type": "integer"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ChatInviteLink"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/createChatSubscriptionInviteLink": {
            "post": {
                "summary": "createChatSubscriptionInviteLink",
                "description": "Use this method to create a subscription invite link for a channel chat. The bot must have the can_invite_users administrator rights. The link can be edited using the method editChatSubscriptionInviteLink or revoked using the method revokeChatInviteLink. Returns the new invite link as a ChatInviteLink object.",
                "operationId": "createChatSubscriptionInviteLink",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "subscription_period": {
                                        "type": "integer"
                                    },
                                    "subscription_price": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "subscription_period",
                                    "subscription_price"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ChatInviteLink"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/createForumTopic": {
            "post": {
                "summary": "createForumTopic",
                "description": "Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object.",
                "operationId": "createForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "icon_color": {
                                        "type": "integer"
                                    },
                                    "icon_custom_emoji_id": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ForumTopic"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/createInvoiceLink": {
            "post": {
                "summary": "createInvoiceLink",
                "description": "Use this method to create a link for an invoice. Returns the created invoice link as String on success.",
                "operationId": "createInvoiceLink",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "currency": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "is_flexible": {
                                        "type": "boolean"
                                    },
                                    "max_tip_amount": {
                                        "type": "integer"
                                    },
                                    "need_email": {
                                        "type": "boolean"
                                    },
                                    "need_name": {
                                        "type": "boolean"
                                    },
                                    "need_phone_number": {
                                        "type": "boolean"
                                    },
                                    "need_shipping_address": {
                                        "type": "boolean"
                                    },
                                    "payload": {
                                        "type": "string"
                                    },
                                    "photo_height": {
                                        "type": "integer"
                                    },
                                    "photo_size": {
                                        "type": "integer"
                                    },
                                    "photo_url": {
                                        "type": "string"
                                    },
                                    "photo_width": {
                                        "type": "integer"
                                    },
                                    "prices": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/LabeledPrice"
                                        }
                                    },
                                    "provider_data": {
                                        "type": "string"
                                    },
                                    "provider_token": {
                                        "type": "string"
                                    },
                                    "send_email_to_provider": {
                                        "type": "boolean"
                                    },
                                    "send_phone_number_to_provider": {
                                        "type": "boolean"
                                    },
                                    "subscription_period": {
                                        "type": "integer"
                                    },
                                    "suggested_tip_amounts": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "title": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "title",
                                    "description",
                                    "payload",
                                    "currency",
                                    "prices"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/createNewStickerSet": {
            "post": {
                "summary": "createNewStickerSet",
                "description": "Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success.",
                "operationId": "createNewStickerSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "needs_repainting": {
                                        "type": "boolean"
                                    },
                                    "sticker_type": {
                                        "type": "string"
                                    },
                                    "stickers": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/InputSticker"
                                        }
                                    },
                                    "title": {
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "name",
                                    "title",
                                    "stickers"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/declineChatJoinRequest": {
            "post": {
                "summary": "declineChatJoinRequest",
                "description": "Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.",
                "operationId": "declineChatJoinRequest",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteBusinessMessages": {
            "post": {
                "summary": "deleteBusinessMessages",
                "description": "Delete messages on behalf of a business account. Requires the can_delete_sent_messages business bot right to delete messages sent by the bot itself, or the can_delete_all_messages business bot right to delete any message. Returns True on success.",
                "operationId": "deleteBusinessMessages",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "message_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "message_ids"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteChatPhoto": {
            "post": {
                "summary": "deleteChatPhoto",
                "description": "Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.",
                "operationId": "deleteChatPhoto",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteChatStickerSet": {
            "post": {
                "summary": "deleteChatStickerSet",
                "description": "Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.",
                "operationId": "deleteChatStickerSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteForumTopic": {
            "post": {
                "summary": "deleteForumTopic",
                "description": "Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success.",
                "operationId": "deleteForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_thread_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteMessage": {
            "post": {
                "summary": "deleteMessage",
                "description": "Use this method to delete a message, including service messages, with the following limitations:- A message can only be deleted if it was sent less than 48 hours ago.- Service messages about a supergroup, channel, or forum topic creation can't be deleted.- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.- Bots can delete outgoing messages in private chats, groups, and supergroups.- Bots can delete incoming messages in private chats.- Bots granted can_post_messages permissions can delete outgoing messages in channels.- If the bot is an administrator of a group, it can delete any message there.- If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.Returns True on success.",
                "operationId": "deleteMessage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteMessages": {
            "post": {
                "summary": "deleteMessages",
                "description": "Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped. Returns True on success.",
                "operationId": "deleteMessages",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_ids"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteMyCommands": {
            "post": {
                "summary": "deleteMyCommands",
                "description": "Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success.",
                "operationId": "deleteMyCommands",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "language_code": {
                                        "type": "string"
                                    },
                                    "scope": {
                                        "$ref": "#/components/schemas/BotCommandScope"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteStickerFromSet": {
            "post": {
                "summary": "deleteStickerFromSet",
                "description": "Use this method to delete a sticker from a set created by the bot. Returns True on success.",
                "operationId": "deleteStickerFromSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sticker": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "sticker"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteStickerSet": {
            "post": {
                "summary": "deleteStickerSet",
                "description": "Use this method to delete a sticker set that was created by the bot. Returns True on success.",
                "operationId": "deleteStickerSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteStory": {
            "post": {
                "summary": "deleteStory",
                "description": "Deletes a story previously posted by the bot on behalf of a managed business account. Requires the can_manage_stories business bot right. Returns True on success.",
                "operationId": "deleteStory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "story_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "story_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deleteWebhook": {
            "post": {
                "summary": "deleteWebhook",
                "description": "Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.",
                "operationId": "deleteWebhook",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "drop_pending_updates": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editChatInviteLink": {
            "post": {
                "summary": "editChatInviteLink",
                "description": "Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object.",
                "operationId": "editChatInviteLink",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "creates_join_request": {
                                        "type": "boolean"
                                    },
                                    "expire_date": {
                                        "type": "integer"
                                    },
                                    "invite_link": {
                                        "type": "string"
                                    },
                                    "member_limit": {
                                        "type": "integer"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "invite_link"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ChatInviteLink"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editChatSubscriptionInviteLink": {
            "post": {
                "summary": "editChatSubscriptionInviteLink",
                "description": "Use this method to edit a subscription invite link created by the bot. The bot must have the can_invite_users administrator rights. Returns the edited invite link as a ChatInviteLink object.",
                "operationId": "editChatSubscriptionInviteLink",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "invite_link": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "invite_link"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ChatInviteLink"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editForumTopic": {
            "post": {
                "summary": "editForumTopic",
                "description": "Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.",
                "operationId": "editForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "icon_custom_emoji_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_thread_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editGeneralForumTopic": {
            "post": {
                "summary": "editGeneralForumTopic",
                "description": "Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.",
                "operationId": "editGeneralForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editMessageCaption": {
            "post": {
                "summary": "editMessageCaption",
                "description": "Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent.",
                "operationId": "editMessageCaption",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "inline_message_id": {
                                        "type": "string"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    },
                                    "show_caption_above_media": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editMessageChecklist": {
            "post": {
                "summary": "editMessageChecklist",
                "description": "Use this method to edit a checklist on behalf of a connected business account. On success, the edited Message is returned.",
                "operationId": "editMessageChecklist",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "type": "integer"
                                    },
                                    "checklist": {
                                        "$ref": "#/components/schemas/InputChecklist"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "chat_id",
                                    "message_id",
                                    "checklist"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editMessageLiveLocation": {
            "post": {
                "summary": "editMessageLiveLocation",
                "description": "Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.",
                "operationId": "editMessageLiveLocation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "heading": {
                                        "type": "integer"
                                    },
                                    "horizontal_accuracy": {
                                        "type": "number"
                                    },
                                    "inline_message_id": {
                                        "type": "string"
                                    },
                                    "latitude": {
                                        "type": "number"
                                    },
                                    "live_period": {
                                        "type": "integer"
                                    },
                                    "longitude": {
                                        "type": "number"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "proximity_alert_radius": {
                                        "type": "integer"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    }
                                },
                                "required": [
                                    "latitude",
                                    "longitude"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editMessageMedia": {
            "post": {
                "summary": "editMessageMedia",
                "description": "Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent.",
                "operationId": "editMessageMedia",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "inline_message_id": {
                                        "type": "string"
                                    },
                                    "media": {
                                        "$ref": "#/components/schemas/InputMedia"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    }
                                },
                                "required": [
                                    "media"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editMessageReplyMarkup": {
            "post": {
                "summary": "editMessageReplyMarkup",
                "description": "Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent.",
                "operationId": "editMessageReplyMarkup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "inline_message_id": {
                                        "type": "string"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editMessageText": {
            "post": {
                "summary": "editMessageText",
                "description": "Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent.",
                "operationId": "editMessageText",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "inline_message_id": {
                                        "type": "string"
                                    },
                                    "link_preview_options": {
                                        "$ref": "#/components/schemas/LinkPreviewOptions"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    },
                                    "text": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "text"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editStory": {
            "post": {
                "summary": "editStory",
                "description": "Edits a story previously posted by the bot on behalf of a managed business account. Requires the can_manage_stories business bot right. Returns Story on success.",
                "operationId": "editStory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "areas": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/StoryArea"
                                        }
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "content": {
                                        "$ref": "#/components/schemas/InputStoryContent"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "story_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "story_id",
                                    "content"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Story"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/editUserStarSubscription": {
            "post": {
                "summary": "editUserStarSubscription",
                "description": "Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars. Returns True on success.",
                "operationId": "editUserStarSubscription",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "is_canceled": {
                                        "type": "boolean"
                                    },
                                    "telegram_payment_charge_id": {
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "telegram_payment_charge_id",
                                    "is_canceled"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/exportChatInviteLink": {
            "post": {
                "summary": "exportChatInviteLink",
                "description": "Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.",
                "operationId": "exportChatInviteLink",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/forwardMessage": {
            "post": {
                "summary": "forwardMessage",
                "description": "Use this method to forward messages of any kind. Service messages and messages with protected content can't be forwarded. On success, the sent Message is returned.",
                "operationId": "forwardMessage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "from_chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "video_start_timestamp": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "from_chat_id",
                                    "message_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/forwardMessages": {
            "post": {
                "summary": "forwardMessages",
                "description": "Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages. On success, an array of MessageId of the sent messages is returned.",
                "operationId": "forwardMessages",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "from_chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "from_chat_id",
                                    "message_ids"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MessageId"
                                            }
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getBusinessAccountGifts": {
            "post": {
                "summary": "getBusinessAccountGifts",
                "description": "Returns the gifts received and owned by a managed business account. Requires the can_view_gifts_and_stars business bot right. Returns OwnedGifts on success.",
                "operationId": "getBusinessAccountGifts",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "exclude_limited": {
                                        "type": "boolean"
                                    },
                                    "exclude_saved": {
                                        "type": "boolean"
                                    },
                                    "exclude_unique": {
                                        "type": "boolean"
                                    },
                                    "exclude_unlimited": {
                                        "type": "boolean"
                                    },
                                    "exclude_unsaved": {
                                        "type": "boolean"
                                    },
                                    "limit": {
                                        "type": "integer"
                                    },
                                    "offset": {
                                        "type": "string"
                                    },
                                    "sort_by_price": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "business_connection_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/OwnedGifts"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getBusinessAccountStarBalance": {
            "post": {
                "summary": "getBusinessAccountStarBalance",
                "description": "Returns the amount of Telegram Stars owned by a managed business account. Requires the can_view_gifts_and_stars business bot right. Returns StarAmount on success.",
                "operationId": "getBusinessAccountStarBalance",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "business_connection_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/StarAmount"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getBusinessConnection": {
            "post": {
                "summary": "getBusinessConnection",
                "description": "Use this method to get information about the connection of the bot with a business account. Returns a BusinessConnection object on success.",
                "operationId": "getBusinessConnection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "business_connection_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/BusinessConnection"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getChat": {
            "post": {
                "summary": "getChat",
                "description": "Use this method to get up-to-date information about the chat. Returns a ChatFullInfo object on success.",
                "operationId": "getChat",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ChatFullInfo"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getChatAdministrators": {
            "post": {
                "summary": "getChatAdministrators",
                "description": "Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects.",
                "operationId": "getChatAdministrators",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ChatMember"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getChatMember": {
            "post": {
                "summary": "getChatMember",
                "description": "Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a ChatMember object on success.",
                "operationId": "getChatMember",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ChatMember"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getChatMemberCount": {
            "post": {
                "summary": "getChatMemberCount",
                "description": "Use this method to get the number of members in a chat. Returns Int on success.",
                "operationId": "getChatMemberCount",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getChatMenuButton": {
            "post": {
                "summary": "getChatMenuButton",
                "description": "Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success.",
                "operationId": "getChatMenuButton",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/MenuButton"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getCustomEmojiStickers": {
            "post": {
                "summary": "getCustomEmojiStickers",
                "description": "Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects.",
                "operationId": "getCustomEmojiStickers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "custom_emoji_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "custom_emoji_ids"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Sticker"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getFile": {
            "post": {
                "summary": "getFile",
                "description": "Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot\u003ctoken\u003e/\u003cfile_path\u003e, where \u003cfile_path\u003e is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.",
                "operationId": "getFile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "file_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/File"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getGameHighScores": {
            "post": {
                "summary": "getGameHighScores",
                "description": "Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects.",
                "operationId": "getGameHighScores",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "type": "integer"
                                    },
                                    "inline_message_id": {
                                        "type": "string"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/GameHighScore"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getMyCommands": {
            "post": {
                "summary": "getMyCommands",
                "description": "Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned.",
                "operationId": "getMyCommands",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "language_code": {
                                        "type": "string"
                                    },
                                    "scope": {
                                        "$ref": "#/components/schemas/BotCommandScope"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/BotCommand"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getMyDefaultAdministratorRights": {
            "post": {
                "summary": "getMyDefaultAdministratorRights",
                "description": "Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.",
                "operationId": "getMyDefaultAdministratorRights",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "for_channels": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ChatAdministratorRights"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getMyDescription": {
            "post": {
                "summary": "getMyDescription",
                "description": "Use this method to get the current bot description for the given user language. Returns BotDescription on success.",
                "operationId": "getMyDescription",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "language_code": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/BotDescription"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getMyName": {
            "post": {
                "summary": "getMyName",
                "description": "Use this method to get the current bot name for the given user language. Returns BotName on success.",
                "operationId": "getMyName",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "language_code": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/BotName"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getMyShortDescription": {
            "post": {
                "summary": "getMyShortDescription",
                "description": "Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success.",
                "operationId": "getMyShortDescription",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "language_code": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/BotShortDescription"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getStarTransactions": {
            "post": {
                "summary": "getStarTransactions",
                "description": "Returns the bot's Telegram Star transactions in chronological order. On success, returns a StarTransactions object.",
                "operationId": "getStarTransactions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "limit": {
                                        "type": "integer"
                                    },
                                    "offset": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/StarTransactions"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getStickerSet": {
            "post": {
                "summary": "getStickerSet",
                "description": "Use this method to get a sticker set. On success, a StickerSet object is returned.",
                "operationId": "getStickerSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/StickerSet"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getUpdates": {
            "post": {
                "summary": "getUpdates",
                "description": "Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects.",
                "operationId": "getUpdates",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allowed_updates": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "limit": {
                                        "type": "integer"
                                    },
                                    "offset": {
                                        "type": "integer"
                                    },
                                    "timeout": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Update"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getUserChatBoosts": {
            "post": {
                "summary": "getUserChatBoosts",
                "description": "Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a UserChatBoosts object.",
                "operationId": "getUserChatBoosts",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/UserChatBoosts"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/getUserProfilePhotos": {
            "post": {
                "summary": "getUserProfilePhotos",
                "description": "Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.",
                "operationId": "getUserProfilePhotos",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "limit": {
                                        "type": "integer"
                                    },
                                    "offset": {
                                        "type": "integer"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/UserProfilePhotos"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/giftPremiumSubscription": {
            "post": {
                "summary": "giftPremiumSubscription",
                "description": "Gifts a Telegram Premium subscription to the given user. Returns True on success.",
                "operationId": "giftPremiumSubscription",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "month_count": {
                                        "type": "integer"
                                    },
                                    "star_count": {
                                        "type": "integer"
                                    },
                                    "text": {
                                        "type": "string"
                                    },
                                    "text_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "text_parse_mode": {
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "month_count",
                                    "star_count"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/hideGeneralForumTopic": {
            "post": {
                "summary": "hideGeneralForumTopic",
                "description": "Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success.",
                "operationId": "hideGeneralForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/leaveChat": {
            "post": {
                "summary": "leaveChat",
                "description": "Use this method for your bot to leave a group, supergroup or channel. Returns True on success.",
                "operationId": "leaveChat",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/pinChatMessage": {
            "post": {
                "summary": "pinChatMessage",
                "description": "Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.",
                "operationId": "pinChatMessage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/postStory": {
            "post": {
                "summary": "postStory",
                "description": "Posts a story on behalf of a managed business account. Requires the can_manage_stories business bot right. Returns Story on success.",
                "operationId": "postStory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "active_period": {
                                        "type": "integer"
                                    },
                                    "areas": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/StoryArea"
                                        }
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "content": {
                                        "$ref": "#/components/schemas/InputStoryContent"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "post_to_chat_page": {
                                        "type": "boolean"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "content",
                                    "active_period"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Story"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/promoteChatMember": {
            "post": {
                "summary": "promoteChatMember",
                "description": "Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.",
                "operationId": "promoteChatMember",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "can_change_info": {
                                        "type": "boolean"
                                    },
                                    "can_delete_messages": {
                                        "type": "boolean"
                                    },
                                    "can_delete_stories": {
                                        "type": "boolean"
                                    },
                                    "can_edit_messages": {
                                        "type": "boolean"
                                    },
                                    "can_edit_stories": {
                                        "type": "boolean"
                                    },
                                    "can_invite_users": {
                                        "type": "boolean"
                                    },
                                    "can_manage_chat": {
                                        "type": "boolean"
                                    },
                                    "can_manage_topics": {
                                        "type": "boolean"
                                    },
                                    "can_manage_video_chats": {
                                        "type": "boolean"
                                    },
                                    "can_pin_messages": {
                                        "type": "boolean"
                                    },
                                    "can_post_messages": {
                                        "type": "boolean"
                                    },
                                    "can_post_stories": {
                                        "type": "boolean"
                                    },
                                    "can_promote_members": {
                                        "type": "boolean"
                                    },
                                    "can_restrict_members": {
                                        "type": "boolean"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "is_anonymous": {
                                        "type": "boolean"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/readBusinessMessage": {
            "post": {
                "summary": "readBusinessMessage",
                "description": "Marks incoming message as read on behalf of a business account. Requires the can_read_messages business bot right. Returns True on success.",
                "operationId": "readBusinessMessage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "type": "integer"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "chat_id",
                                    "message_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/refundStarPayment": {
            "post": {
                "summary": "refundStarPayment",
                "description": "Refunds a successful payment in Telegram Stars. Returns True on success.",
                "operationId": "refundStarPayment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "telegram_payment_charge_id": {
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "telegram_payment_charge_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/removeBusinessAccountProfilePhoto": {
            "post": {
                "summary": "removeBusinessAccountProfilePhoto",
                "description": "Removes the current profile photo of a managed business account. Requires the can_edit_profile_photo business bot right. Returns True on success.",
                "operationId": "removeBusinessAccountProfilePhoto",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "is_public": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "business_connection_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/removeChatVerification": {
            "post": {
                "summary": "removeChatVerification",
                "description": "Removes verification from a chat that is currently verified on behalf of the organization represented by the bot. Returns True on success.",
                "operationId": "removeChatVerification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/removeUserVerification": {
            "post": {
                "summary": "removeUserVerification",
                "description": "Removes verification from a user who is currently verified on behalf of the organization represented by the bot. Returns True on success.",
                "operationId": "removeUserVerification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/reopenForumTopic": {
            "post": {
                "summary": "reopenForumTopic",
                "description": "Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.",
                "operationId": "reopenForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_thread_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/reopenGeneralForumTopic": {
            "post": {
                "summary": "reopenGeneralForumTopic",
                "description": "Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success.",
                "operationId": "reopenGeneralForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/replaceStickerInSet": {
            "post": {
                "summary": "replaceStickerInSet",
                "description": "Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling deleteStickerFromSet, then addStickerToSet, then setStickerPositionInSet. Returns True on success.",
                "operationId": "replaceStickerInSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "old_sticker": {
                                        "type": "string"
                                    },
                                    "sticker": {
                                        "$ref": "#/components/schemas/InputSticker"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "name",
                                    "old_sticker",
                                    "sticker"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/restrictChatMember": {
            "post": {
                "summary": "restrictChatMember",
                "description": "Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.",
                "operationId": "restrictChatMember",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "permissions": {
                                        "$ref": "#/components/schemas/ChatPermissions"
                                    },
                                    "until_date": {
                                        "type": "integer"
                                    },
                                    "use_independent_chat_permissions": {
                                        "type": "boolean"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "user_id",
                                    "permissions"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/revokeChatInviteLink": {
            "post": {
                "summary": "revokeChatInviteLink",
                "description": "Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object.",
                "operationId": "revokeChatInviteLink",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "invite_link": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "invite_link"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/ChatInviteLink"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/savePreparedInlineMessage": {
            "post": {
                "summary": "savePreparedInlineMessage",
                "description": "Stores a message that can be sent by a user of a Mini App. Returns a PreparedInlineMessage object.",
                "operationId": "savePreparedInlineMessage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_bot_chats": {
                                        "type": "boolean"
                                    },
                                    "allow_channel_chats": {
                                        "type": "boolean"
                                    },
                                    "allow_group_chats": {
                                        "type": "boolean"
                                    },
                                    "allow_user_chats": {
                                        "type": "boolean"
                                    },
                                    "result": {
                                        "$ref": "#/components/schemas/InlineQueryResult"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "result"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/PreparedInlineMessage"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendAnimation": {
            "post": {
                "summary": "sendAnimation",
                "description": "Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.",
                "operationId": "sendAnimation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "animation": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "duration": {
                                        "type": "integer"
                                    },
                                    "has_spoiler": {
                                        "type": "boolean"
                                    },
                                    "height": {
                                        "type": "integer"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "show_caption_above_media": {
                                        "type": "boolean"
                                    },
                                    "thumbnail": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "width": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "animation"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendAudio": {
            "post": {
                "summary": "sendAudio",
                "description": "Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.For sending voice messages, use the sendVoice method instead.",
                "operationId": "sendAudio",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "audio": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "duration": {
                                        "type": "integer"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "performer": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "thumbnail": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "title": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "audio"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendChatAction": {
            "post": {
                "summary": "sendChatAction",
                "description": "Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.",
                "operationId": "sendChatAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "type": "string"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "action"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendChecklist": {
            "post": {
                "summary": "sendChecklist",
                "description": "Use this method to send a checklist on behalf of a connected business account. On success, the sent Message is returned.",
                "operationId": "sendChecklist",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "type": "integer"
                                    },
                                    "checklist": {
                                        "$ref": "#/components/schemas/InputChecklist"
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "chat_id",
                                    "checklist"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendContact": {
            "post": {
                "summary": "sendContact",
                "description": "Use this method to send phone contacts. On success, the sent Message is returned.",
                "operationId": "sendContact",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "first_name": {
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "type": "string"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "phone_number": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "vcard": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "phone_number",
                                    "first_name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendDice": {
            "post": {
                "summary": "sendDice",
                "description": "Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.",
                "operationId": "sendDice",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "emoji": {
                                        "type": "string"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendDocument": {
            "post": {
                "summary": "sendDocument",
                "description": "Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.",
                "operationId": "sendDocument",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_content_type_detection": {
                                        "type": "boolean"
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "document": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "thumbnail": {
                                        "$ref": "#/components/schemas/InputFile"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "document"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendGame": {
            "post": {
                "summary": "sendGame",
                "description": "Use this method to send a game. On success, the sent Message is returned.",
                "operationId": "sendGame",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "type": "integer"
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "game_short_name": {
                                        "type": "string"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "game_short_name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendGift": {
            "post": {
                "summary": "sendGift",
                "description": "Sends a gift to the given user or channel chat. The gift can't be converted to Telegram Stars by the receiver. Returns True on success.",
                "operationId": "sendGift",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "gift_id": {
                                        "type": "string"
                                    },
                                    "pay_for_upgrade": {
                                        "type": "boolean"
                                    },
                                    "text": {
                                        "type": "string"
                                    },
                                    "text_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "text_parse_mode": {
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "gift_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendInvoice": {
            "post": {
                "summary": "sendInvoice",
                "description": "Use this method to send invoices. On success, the sent Message is returned.",
                "operationId": "sendInvoice",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "currency": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "is_flexible": {
                                        "type": "boolean"
                                    },
                                    "max_tip_amount": {
                                        "type": "integer"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "need_email": {
                                        "type": "boolean"
                                    },
                                    "need_name": {
                                        "type": "boolean"
                                    },
                                    "need_phone_number": {
                                        "type": "boolean"
                                    },
                                    "need_shipping_address": {
                                        "type": "boolean"
                                    },
                                    "payload": {
                                        "type": "string"
                                    },
                                    "photo_height": {
                                        "type": "integer"
                                    },
                                    "photo_size": {
                                        "type": "integer"
                                    },
                                    "photo_url": {
                                        "type": "string"
                                    },
                                    "photo_width": {
                                        "type": "integer"
                                    },
                                    "prices": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/LabeledPrice"
                                        }
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "provider_data": {
                                        "type": "string"
                                    },
                                    "provider_token": {
                                        "type": "string"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "send_email_to_provider": {
                                        "type": "boolean"
                                    },
                                    "send_phone_number_to_provider": {
                                        "type": "boolean"
                                    },
                                    "start_parameter": {
                                        "type": "string"
                                    },
                                    "suggested_tip_amounts": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "title": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "title",
                                    "description",
                                    "payload",
                                    "currency",
                                    "prices"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendLocation": {
            "post": {
                "summary": "sendLocation",
                "description": "Use this method to send point on the map. On success, the sent Message is returned.",
                "operationId": "sendLocation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "heading": {
                                        "type": "integer"
                                    },
                                    "horizontal_accuracy": {
                                        "type": "number"
                                    },
                                    "latitude": {
                                        "type": "number"
                                    },
                                    "live_period": {
                                        "type": "integer"
                                    },
                                    "longitude": {
                                        "type": "number"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "proximity_alert_radius": {
                                        "type": "integer"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "latitude",
                                    "longitude"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendMediaGroup": {
            "post": {
                "summary": "sendMediaGroup",
                "description": "Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.",
                "operationId": "sendMediaGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "media": {
                                        "type": "array",
                                        "items": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/components/schemas/InputMediaAudio"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/InputMediaDocument"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/InputMediaPhoto"
                                                },
                                                {
                                                    "$ref": "#/components/schemas/InputMediaVideo"
                                                }
                                            ]
                                        }
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "media"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Message"
                                            }
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendMessage": {
            "post": {
                "summary": "sendMessage",
                "description": "Use this method to send text messages. On success, the sent Message is returned.",
                "operationId": "sendMessage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "link_preview_options": {
                                        "$ref": "#/components/schemas/LinkPreviewOptions"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "text": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "text"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendPaidMedia": {
            "post": {
                "summary": "sendPaidMedia",
                "description": "Use this method to send paid media. On success, the sent Message is returned.",
                "operationId": "sendPaidMedia",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "media": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/InputPaidMedia"
                                        }
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "payload": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "show_caption_above_media": {
                                        "type": "boolean"
                                    },
                                    "star_count": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "star_count",
                                    "media"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendPhoto": {
            "post": {
                "summary": "sendPhoto",
                "description": "Use this method to send photos. On success, the sent Message is returned.",
                "operationId": "sendPhoto",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "has_spoiler": {
                                        "type": "boolean"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "photo": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "show_caption_above_media": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "photo"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendPoll": {
            "post": {
                "summary": "sendPoll",
                "description": "Use this method to send a native poll. On success, the sent Message is returned.",
                "operationId": "sendPoll",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "allows_multiple_answers": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "close_date": {
                                        "type": "integer"
                                    },
                                    "correct_option_id": {
                                        "type": "integer"
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "explanation": {
                                        "type": "string"
                                    },
                                    "explanation_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "explanation_parse_mode": {
                                        "type": "string"
                                    },
                                    "is_anonymous": {
                                        "type": "boolean"
                                    },
                                    "is_closed": {
                                        "type": "boolean"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "open_period": {
                                        "type": "integer"
                                    },
                                    "options": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/InputPollOption"
                                        }
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "question": {
                                        "type": "string"
                                    },
                                    "question_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "question_parse_mode": {
                                        "type": "string"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "type": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "question",
                                    "options"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendSticker": {
            "post": {
                "summary": "sendSticker",
                "description": "Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned.",
                "operationId": "sendSticker",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "emoji": {
                                        "type": "string"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "sticker": {
                                        "$ref": "#/components/schemas/InputFile"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "sticker"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendVenue": {
            "post": {
                "summary": "sendVenue",
                "description": "Use this method to send information about a venue. On success, the sent Message is returned.",
                "operationId": "sendVenue",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "address": {
                                        "type": "string"
                                    },
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "foursquare_id": {
                                        "type": "string"
                                    },
                                    "foursquare_type": {
                                        "type": "string"
                                    },
                                    "google_place_id": {
                                        "type": "string"
                                    },
                                    "google_place_type": {
                                        "type": "string"
                                    },
                                    "latitude": {
                                        "type": "number"
                                    },
                                    "longitude": {
                                        "type": "number"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "title": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "latitude",
                                    "longitude",
                                    "title",
                                    "address"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendVideo": {
            "post": {
                "summary": "sendVideo",
                "description": "Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.",
                "operationId": "sendVideo",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "cover": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "duration": {
                                        "type": "integer"
                                    },
                                    "has_spoiler": {
                                        "type": "boolean"
                                    },
                                    "height": {
                                        "type": "integer"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "show_caption_above_media": {
                                        "type": "boolean"
                                    },
                                    "start_timestamp": {
                                        "type": "integer"
                                    },
                                    "supports_streaming": {
                                        "type": "boolean"
                                    },
                                    "thumbnail": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "video": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "width": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "video"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendVideoNote": {
            "post": {
                "summary": "sendVideoNote",
                "description": "As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.",
                "operationId": "sendVideoNote",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "duration": {
                                        "type": "integer"
                                    },
                                    "length": {
                                        "type": "integer"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "thumbnail": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "video_note": {
                                        "$ref": "#/components/schemas/InputFile"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "video_note"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendVoice": {
            "post": {
                "summary": "sendVoice",
                "description": "Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.",
                "operationId": "sendVoice",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_paid_broadcast": {
                                        "type": "boolean"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string"
                                    },
                                    "caption_entities": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MessageEntity"
                                        }
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "disable_notification": {
                                        "type": "boolean"
                                    },
                                    "duration": {
                                        "type": "integer"
                                    },
                                    "message_effect_id": {
                                        "type": "string"
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    },
                                    "parse_mode": {
                                        "type": "string"
                                    },
                                    "protect_content": {
                                        "type": "boolean"
                                    },
                                    "reply_markup": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardMarkup"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ReplyKeyboardRemove"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ForceReply"
                                            }
                                        ]
                                    },
                                    "reply_parameters": {
                                        "$ref": "#/components/schemas/ReplyParameters"
                                    },
                                    "voice": {
                                        "$ref": "#/components/schemas/InputFile"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "voice"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setBusinessAccountBio": {
            "post": {
                "summary": "setBusinessAccountBio",
                "description": "Changes the bio of a managed business account. Requires the can_change_bio business bot right. Returns True on success.",
                "operationId": "setBusinessAccountBio",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "bio": {
                                        "type": "string"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "business_connection_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setBusinessAccountGiftSettings": {
            "post": {
                "summary": "setBusinessAccountGiftSettings",
                "description": "Changes the privacy settings pertaining to incoming gifts in a managed business account. Requires the can_change_gift_settings business bot right. Returns True on success.",
                "operationId": "setBusinessAccountGiftSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "accepted_gift_types": {
                                        "$ref": "#/components/schemas/AcceptedGiftTypes"
                                    },
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "show_gift_button": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "show_gift_button",
                                    "accepted_gift_types"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setBusinessAccountName": {
            "post": {
                "summary": "setBusinessAccountName",
                "description": "Changes the first and last name of a managed business account. Requires the can_change_name business bot right. Returns True on success.",
                "operationId": "setBusinessAccountName",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "first_name": {
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "first_name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setBusinessAccountProfilePhoto": {
            "post": {
                "summary": "setBusinessAccountProfilePhoto",
                "description": "Changes the profile photo of a managed business account. Requires the can_edit_profile_photo business bot right. Returns True on success.",
                "operationId": "setBusinessAccountProfilePhoto",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "is_public": {
                                        "type": "boolean"
                                    },
                                    "photo": {
                                        "$ref": "#/components/schemas/InputProfilePhoto"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "photo"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setBusinessAccountUsername": {
            "post": {
                "summary": "setBusinessAccountUsername",
                "description": "Changes the username of a managed business account. Requires the can_change_username business bot right. Returns True on success.",
                "operationId": "setBusinessAccountUsername",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "username": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "business_connection_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setChatAdministratorCustomTitle": {
            "post": {
                "summary": "setChatAdministratorCustomTitle",
                "description": "Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.",
                "operationId": "setChatAdministratorCustomTitle",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "custom_title": {
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "user_id",
                                    "custom_title"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setChatDescription": {
            "post": {
                "summary": "setChatDescription",
                "description": "Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.",
                "operationId": "setChatDescription",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setChatMenuButton": {
            "post": {
                "summary": "setChatMenuButton",
                "description": "Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success.",
                "operationId": "setChatMenuButton",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "type": "integer"
                                    },
                                    "menu_button": {
                                        "$ref": "#/components/schemas/MenuButton"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setChatPermissions": {
            "post": {
                "summary": "setChatPermissions",
                "description": "Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success.",
                "operationId": "setChatPermissions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "permissions": {
                                        "$ref": "#/components/schemas/ChatPermissions"
                                    },
                                    "use_independent_chat_permissions": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "permissions"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setChatPhoto": {
            "post": {
                "summary": "setChatPhoto",
                "description": "Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.",
                "operationId": "setChatPhoto",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "photo": {
                                        "$ref": "#/components/schemas/InputFile"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "photo"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setChatStickerSet": {
            "post": {
                "summary": "setChatStickerSet",
                "description": "Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.",
                "operationId": "setChatStickerSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "sticker_set_name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "sticker_set_name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setChatTitle": {
            "post": {
                "summary": "setChatTitle",
                "description": "Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.",
                "operationId": "setChatTitle",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "title": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "title"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setCustomEmojiStickerSetThumbnail": {
            "post": {
                "summary": "setCustomEmojiStickerSetThumbnail",
                "description": "Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success.",
                "operationId": "setCustomEmojiStickerSetThumbnail",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "custom_emoji_id": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setGameScore": {
            "post": {
                "summary": "setGameScore",
                "description": "Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.",
                "operationId": "setGameScore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "type": "integer"
                                    },
                                    "disable_edit_message": {
                                        "type": "boolean"
                                    },
                                    "force": {
                                        "type": "boolean"
                                    },
                                    "inline_message_id": {
                                        "type": "string"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "score": {
                                        "type": "integer"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "score"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setMessageReaction": {
            "post": {
                "summary": "setMessageReaction",
                "description": "Use this method to change the chosen reactions on a message. Service messages of some types can't be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Bots can't use paid reactions. Returns True on success.",
                "operationId": "setMessageReaction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "is_big": {
                                        "type": "boolean"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "reaction": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ReactionType"
                                        }
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setMyCommands": {
            "post": {
                "summary": "setMyCommands",
                "description": "Use this method to change the list of the bot's commands. See this manual for more details about bot commands. Returns True on success.",
                "operationId": "setMyCommands",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "commands": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/BotCommand"
                                        }
                                    },
                                    "language_code": {
                                        "type": "string"
                                    },
                                    "scope": {
                                        "$ref": "#/components/schemas/BotCommandScope"
                                    }
                                },
                                "required": [
                                    "commands"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setMyDefaultAdministratorRights": {
            "post": {
                "summary": "setMyDefaultAdministratorRights",
                "description": "Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success.",
                "operationId": "setMyDefaultAdministratorRights",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "for_channels": {
                                        "type": "boolean"
                                    },
                                    "rights": {
                                        "$ref": "#/components/schemas/ChatAdministratorRights"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setMyDescription": {
            "post": {
                "summary": "setMyDescription",
                "description": "Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success.",
                "operationId": "setMyDescription",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "type": "string"
                                    },
                                    "language_code": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setMyName": {
            "post": {
                "summary": "setMyName",
                "description": "Use this method to change the bot's name. Returns True on success.",
                "operationId": "setMyName",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "language_code": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setMyShortDescription": {
            "post": {
                "summary": "setMyShortDescription",
                "description": "Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success.",
                "operationId": "setMyShortDescription",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "language_code": {
                                        "type": "string"
                                    },
                                    "short_description": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setPassportDataErrors": {
            "post": {
                "summary": "setPassportDataErrors",
                "description": "Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.",
                "operationId": "setPassportDataErrors",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "errors": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/PassportElementError"
                                        }
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "errors"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setStickerEmojiList": {
            "post": {
                "summary": "setStickerEmojiList",
                "description": "Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.",
                "operationId": "setStickerEmojiList",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "emoji_list": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "sticker": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "sticker",
                                    "emoji_list"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setStickerKeywords": {
            "post": {
                "summary": "setStickerKeywords",
                "description": "Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.",
                "operationId": "setStickerKeywords",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "keywords": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "sticker": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "sticker"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setStickerMaskPosition": {
            "post": {
                "summary": "setStickerMaskPosition",
                "description": "Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success.",
                "operationId": "setStickerMaskPosition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "mask_position": {
                                        "$ref": "#/components/schemas/MaskPosition"
                                    },
                                    "sticker": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "sticker"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setStickerPositionInSet": {
            "post": {
                "summary": "setStickerPositionInSet",
                "description": "Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success.",
                "operationId": "setStickerPositionInSet",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "type": "integer"
                                    },
                                    "sticker": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "sticker",
                                    "position"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setStickerSetThumbnail": {
            "post": {
                "summary": "setStickerSetThumbnail",
                "description": "Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success.",
                "operationId": "setStickerSetThumbnail",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "thumbnail": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "name",
                                    "user_id",
                                    "format"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setStickerSetTitle": {
            "post": {
                "summary": "setStickerSetTitle",
                "description": "Use this method to set the title of a created sticker set. Returns True on success.",
                "operationId": "setStickerSetTitle",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "title": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "title"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setUserEmojiStatus": {
            "post": {
                "summary": "setUserEmojiStatus",
                "description": "Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method requestEmojiStatusAccess. Returns True on success.",
                "operationId": "setUserEmojiStatus",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "emoji_status_custom_emoji_id": {
                                        "type": "string"
                                    },
                                    "emoji_status_expiration_date": {
                                        "type": "integer"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/setWebhook": {
            "post": {
                "summary": "setWebhook",
                "description": "Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request (a request with response HTTP status code different from 2XY), we will repeat the request and give up after a reasonable amount of attempts. Returns True on success.If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.",
                "operationId": "setWebhook",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allowed_updates": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "certificate": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "drop_pending_updates": {
                                        "type": "boolean"
                                    },
                                    "ip_address": {
                                        "type": "string"
                                    },
                                    "max_connections": {
                                        "type": "integer"
                                    },
                                    "secret_token": {
                                        "type": "string"
                                    },
                                    "url": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "url"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stopMessageLiveLocation": {
            "post": {
                "summary": "stopMessageLiveLocation",
                "description": "Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.",
                "operationId": "stopMessageLiveLocation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "inline_message_id": {
                                        "type": "string"
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stopPoll": {
            "post": {
                "summary": "stopPoll",
                "description": "Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned.",
                "operationId": "stopPoll",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    },
                                    "reply_markup": {
                                        "$ref": "#/components/schemas/InlineKeyboardMarkup"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/Poll"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/transferBusinessAccountStars": {
            "post": {
                "summary": "transferBusinessAccountStars",
                "description": "Transfers Telegram Stars from the business account balance to the bot's balance. Requires the can_transfer_stars business bot right. Returns True on success.",
                "operationId": "transferBusinessAccountStars",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "star_count": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "star_count"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/transferGift": {
            "post": {
                "summary": "transferGift",
                "description": "Transfers an owned unique gift to another user. Requires the can_transfer_and_upgrade_gifts business bot right. Requires can_transfer_stars business bot right if the transfer is paid. Returns True on success.",
                "operationId": "transferGift",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "new_owner_chat_id": {
                                        "type": "integer"
                                    },
                                    "owned_gift_id": {
                                        "type": "string"
                                    },
                                    "star_count": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "owned_gift_id",
                                    "new_owner_chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/unbanChatMember": {
            "post": {
                "summary": "unbanChatMember",
                "description": "Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success.",
                "operationId": "unbanChatMember",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "only_if_banned": {
                                        "type": "boolean"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/unbanChatSenderChat": {
            "post": {
                "summary": "unbanChatSenderChat",
                "description": "Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success.",
                "operationId": "unbanChatSenderChat",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "sender_chat_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "sender_chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/unhideGeneralForumTopic": {
            "post": {
                "summary": "unhideGeneralForumTopic",
                "description": "Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.",
                "operationId": "unhideGeneralForumTopic",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/unpinAllChatMessages": {
            "post": {
                "summary": "unpinAllChatMessages",
                "description": "Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.",
                "operationId": "unpinAllChatMessages",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/unpinAllForumTopicMessages": {
            "post": {
                "summary": "unpinAllForumTopicMessages",
                "description": "Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.",
                "operationId": "unpinAllForumTopicMessages",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_thread_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id",
                                    "message_thread_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/unpinAllGeneralForumTopicMessages": {
            "post": {
                "summary": "unpinAllGeneralForumTopicMessages",
                "description": "Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.",
                "operationId": "unpinAllGeneralForumTopicMessages",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/unpinChatMessage": {
            "post": {
                "summary": "unpinChatMessage",
                "description": "Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.",
                "operationId": "unpinChatMessage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "message_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/upgradeGift": {
            "post": {
                "summary": "upgradeGift",
                "description": "Upgrades a given regular gift to a unique gift. Requires the can_transfer_and_upgrade_gifts business bot right. Additionally requires the can_transfer_stars business bot right if the upgrade is paid. Returns True on success.",
                "operationId": "upgradeGift",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "business_connection_id": {
                                        "type": "string"
                                    },
                                    "keep_original_details": {
                                        "type": "boolean"
                                    },
                                    "owned_gift_id": {
                                        "type": "string"
                                    },
                                    "star_count": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "business_connection_id",
                                    "owned_gift_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/uploadStickerFile": {
            "post": {
                "summary": "uploadStickerFile",
                "description": "Use this method to upload a file with a sticker for later use in the createNewStickerSet, addStickerToSet, or replaceStickerInSet methods (the file can be used multiple times). Returns the uploaded File on success.",
                "operationId": "uploadStickerFile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sticker": {
                                        "$ref": "#/components/schemas/InputFile"
                                    },
                                    "sticker_format": {
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id",
                                    "sticker",
                                    "sticker_format"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "$ref": "#/components/schemas/File"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/verifyChat": {
            "post": {
                "summary": "verifyChat",
                "description": "Verifies a chat on behalf of the organization which is represented by the bot. Returns True on success.",
                "operationId": "verifyChat",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chat_id": {
                                        "oneOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "custom_description": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "chat_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/verifyUser": {
            "post": {
                "summary": "verifyUser",
                "description": "Verifies a user on behalf of the organization which is represented by the bot. Returns True on success.",
                "operationId": "verifyUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "custom_description": {
                                        "type": "string"
                                    },
                                    "user_id": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ok": {
                                            "type": "boolean",
                                            "description": "Request success indicator"
                                        },
                                        "result": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "result"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AcceptedGiftTypes": {
                "type": "object",
                "properties": {
                    "limited_gifts": {
                        "type": "boolean",
                        "description": "True, if limited regular gifts are accepted"
                    },
                    "premium_subscription": {
                        "type": "boolean",
                        "description": "True, if a Telegram Premium subscription is accepted"
                    },
                    "unique_gifts": {
                        "type": "boolean",
                        "description": "True, if unique gifts or gifts that can be upgraded to unique for free are accepted"
                    },
                    "unlimited_gifts": {
                        "type": "boolean",
                        "description": "True, if unlimited regular gifts are accepted"
                    }
                },
                "description": "This object describes the types of gifts that can be gifted to a user or a chat.\n"
            },
            "AffiliateInfo": {
                "type": "object",
                "properties": {
                    "affiliate_chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Optional. The chat that received an affiliate commission if it was received by a chat"
                    },
                    "affiliate_user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. The bot or the user that received an affiliate commission if it was received by a bot or a user"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Integer amount of Telegram Stars received by the affiliate from the transaction, rounded to 0; can be negative for refunds"
                    },
                    "commission_per_mille": {
                        "type": "integer",
                        "description": "The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the bot from referred users"
                    },
                    "nanostar_amount": {
                        "type": "integer",
                        "description": "Optional. The number of 1/1000000000 shares of Telegram Stars received by the affiliate; from -999999999 to 999999999; can be negative for refunds"
                    }
                },
                "description": "Contains information about the affiliate that received a commission via this transaction.\n"
            },
            "Animation": {
                "type": "object",
                "properties": {
                    "duration": {
                        "type": "integer",
                        "description": "Duration of the video in seconds as defined by the sender"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_name": {
                        "type": "string",
                        "description": "Optional. Original animation filename as defined by the sender"
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value."
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Video height as defined by the sender"
                    },
                    "mime_type": {
                        "type": "string",
                        "description": "Optional. MIME type of the file as defined by the sender"
                    },
                    "thumbnail": {
                        "$ref": "#/components/schemas/PhotoSize",
                        "description": "Optional. Animation thumbnail as defined by the sender"
                    },
                    "width": {
                        "type": "integer",
                        "description": "Video width as defined by the sender"
                    }
                },
                "description": "This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).\n"
            },
            "Audio": {
                "type": "object",
                "properties": {
                    "duration": {
                        "type": "integer",
                        "description": "Duration of the audio in seconds as defined by the sender"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_name": {
                        "type": "string",
                        "description": "Optional. Original filename as defined by the sender"
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value."
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    },
                    "mime_type": {
                        "type": "string",
                        "description": "Optional. MIME type of the file as defined by the sender"
                    },
                    "performer": {
                        "type": "string",
                        "description": "Optional. Performer of the audio as defined by the sender or by audio tags"
                    },
                    "thumbnail": {
                        "$ref": "#/components/schemas/PhotoSize",
                        "description": "Optional. Thumbnail of the album cover to which the music file belongs"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title of the audio as defined by the sender or by audio tags"
                    }
                },
                "description": "This object represents an audio file to be treated as music by the Telegram clients.\n"
            },
            "BackgroundFill": {
                "type": "object",
                "description": "This object describes the way a background is filled based on the selected colors. Currently, it can be one of\n- BackgroundFillSolid\n- BackgroundFillGradient\n- BackgroundFillFreeformGradient\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BackgroundFillSolid"
                    },
                    {
                        "$ref": "#/components/schemas/BackgroundFillGradient"
                    },
                    {
                        "$ref": "#/components/schemas/BackgroundFillFreeformGradient"
                    }
                ]
            },
            "BackgroundFillFreeformGradient": {
                "type": "object",
                "properties": {
                    "colors": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the background fill, always “freeform_gradient”"
                    }
                },
                "description": "The background is a freeform gradient that rotates after every message in the chat.\n"
            },
            "BackgroundFillGradient": {
                "type": "object",
                "properties": {
                    "bottom_color": {
                        "type": "integer",
                        "description": "Bottom color of the gradient in the RGB24 format"
                    },
                    "rotation_angle": {
                        "type": "integer",
                        "description": "Clockwise rotation angle of the background fill in degrees; 0-359"
                    },
                    "top_color": {
                        "type": "integer",
                        "description": "Top color of the gradient in the RGB24 format"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the background fill, always “gradient”"
                    }
                },
                "description": "The background is a gradient fill.\n"
            },
            "BackgroundFillSolid": {
                "type": "object",
                "properties": {
                    "color": {
                        "type": "integer",
                        "description": "The color of the background fill in the RGB24 format"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the background fill, always “solid”"
                    }
                },
                "description": "The background is filled using the selected color.\n"
            },
            "BackgroundType": {
                "type": "object",
                "description": "This object describes the type of a background. Currently, it can be one of\n- BackgroundTypeFill\n- BackgroundTypeWallpaper\n- BackgroundTypePattern\n- BackgroundTypeChatTheme\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BackgroundTypeFill"
                    },
                    {
                        "$ref": "#/components/schemas/BackgroundTypeWallpaper"
                    },
                    {
                        "$ref": "#/components/schemas/BackgroundTypePattern"
                    },
                    {
                        "$ref": "#/components/schemas/BackgroundTypeChatTheme"
                    }
                ]
            },
            "BackgroundTypeChatTheme": {
                "type": "object",
                "properties": {
                    "theme_name": {
                        "type": "string",
                        "description": "Name of the chat theme, which is usually an emoji"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the background, always “chat_theme”"
                    }
                },
                "description": "The background is taken directly from a built-in chat theme.\n"
            },
            "BackgroundTypeFill": {
                "type": "object",
                "properties": {
                    "dark_theme_dimming": {
                        "type": "integer",
                        "description": "Dimming of the background in dark themes, as a percentage; 0-100"
                    },
                    "fill": {
                        "$ref": "#/components/schemas/BackgroundFill",
                        "description": "The background fill"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the background, always “fill”"
                    }
                },
                "description": "The background is automatically filled based on the selected colors.\n"
            },
            "BackgroundTypePattern": {
                "type": "object",
                "properties": {
                    "document": {
                        "$ref": "#/components/schemas/Document",
                        "description": "Document with the pattern"
                    },
                    "fill": {
                        "$ref": "#/components/schemas/BackgroundFill",
                        "description": "The background fill that is combined with the pattern"
                    },
                    "intensity": {
                        "type": "integer",
                        "description": "Intensity of the pattern when it is shown above the filled background; 0-100"
                    },
                    "is_inverted": {
                        "type": "boolean",
                        "description": "Optional. True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only"
                    },
                    "is_moving": {
                        "type": "boolean",
                        "description": "Optional. True, if the background moves slightly when the device is tilted"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the background, always “pattern”"
                    }
                },
                "description": "The background is a .PNG or .TGV (gzipped subset of SVG with MIME type “application/x-tgwallpattern”) pattern to be combined with the background fill chosen by the user.\n"
            },
            "BackgroundTypeWallpaper": {
                "type": "object",
                "properties": {
                    "dark_theme_dimming": {
                        "type": "integer",
                        "description": "Dimming of the background in dark themes, as a percentage; 0-100"
                    },
                    "document": {
                        "$ref": "#/components/schemas/Document",
                        "description": "Document with the wallpaper"
                    },
                    "is_blurred": {
                        "type": "boolean",
                        "description": "Optional. True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12"
                    },
                    "is_moving": {
                        "type": "boolean",
                        "description": "Optional. True, if the background moves slightly when the device is tilted"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the background, always “wallpaper”"
                    }
                },
                "description": "The background is a wallpaper in the JPEG format.\n"
            },
            "Birthdate": {
                "type": "object",
                "properties": {
                    "day": {
                        "type": "integer",
                        "description": "Day of the user's birth; 1-31"
                    },
                    "month": {
                        "type": "integer",
                        "description": "Month of the user's birth; 1-12"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Optional. Year of the user's birth"
                    }
                },
                "description": "Describes the birthdate of a user.\n"
            },
            "BotCommand": {
                "type": "object",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the command; 1-256 characters."
                    }
                },
                "description": "This object represents a bot command.\n"
            },
            "BotCommandScope": {
                "type": "object",
                "description": "This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:\n- BotCommandScopeDefault\n- BotCommandScopeAllPrivateChats\n- BotCommandScopeAllGroupChats\n- BotCommandScopeAllChatAdministrators\n- BotCommandScopeChat\n- BotCommandScopeChatAdministrators\n- BotCommandScopeChatMember\n"
            },
            "BotCommandScopeAllChatAdministrators": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Scope type, must be all_chat_administrators"
                    }
                },
                "description": "Represents the scope of bot commands, covering all group and supergroup chat administrators.\n"
            },
            "BotCommandScopeAllGroupChats": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Scope type, must be all_group_chats"
                    }
                },
                "description": "Represents the scope of bot commands, covering all group and supergroup chats.\n"
            },
            "BotCommandScopeAllPrivateChats": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Scope type, must be all_private_chats"
                    }
                },
                "description": "Represents the scope of bot commands, covering all private chats.\n"
            },
            "BotCommandScopeChat": {
                "type": "object",
                "properties": {
                    "chat_id": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "description": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
                    },
                    "type": {
                        "type": "string",
                        "description": "Scope type, must be chat"
                    }
                },
                "description": "Represents the scope of bot commands, covering a specific chat.\n"
            },
            "BotCommandScopeChatAdministrators": {
                "type": "object",
                "properties": {
                    "chat_id": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "description": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
                    },
                    "type": {
                        "type": "string",
                        "description": "Scope type, must be chat_administrators"
                    }
                },
                "description": "Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.\n"
            },
            "BotCommandScopeChatMember": {
                "type": "object",
                "properties": {
                    "chat_id": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "description": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
                    },
                    "type": {
                        "type": "string",
                        "description": "Scope type, must be chat_member"
                    },
                    "user_id": {
                        "type": "integer",
                        "description": "Unique identifier of the target user"
                    }
                },
                "description": "Represents the scope of bot commands, covering a specific member of a group or supergroup chat.\n"
            },
            "BotCommandScopeDefault": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Scope type, must be default"
                    }
                },
                "description": "Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user.\n"
            },
            "BotDescription": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The bot's description"
                    }
                },
                "description": "This object represents the bot's description.\n"
            },
            "BotName": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The bot's name"
                    }
                },
                "description": "This object represents the bot's name.\n"
            },
            "BotShortDescription": {
                "type": "object",
                "properties": {
                    "short_description": {
                        "type": "string",
                        "description": "The bot's short description"
                    }
                },
                "description": "This object represents the bot's short description.\n"
            },
            "BusinessBotRights": {
                "type": "object",
                "properties": {
                    "can_change_gift_settings": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can change the privacy settings pertaining to gifts for the business account"
                    },
                    "can_convert_gifts_to_stars": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can convert regular gifts owned by the business account to Telegram Stars"
                    },
                    "can_delete_all_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can delete all private messages in managed chats"
                    },
                    "can_delete_sent_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can delete messages sent by the bot"
                    },
                    "can_edit_bio": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can edit the bio of the business account"
                    },
                    "can_edit_name": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can edit the first and last name of the business account"
                    },
                    "can_edit_profile_photo": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can edit the profile photo of the business account"
                    },
                    "can_edit_username": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can edit the username of the business account"
                    },
                    "can_manage_stories": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can post, edit and delete stories on behalf of the business account"
                    },
                    "can_read_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can mark incoming private messages as read"
                    },
                    "can_reply": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can send and edit messages in the private chats that had incoming messages in the last 24 hours"
                    },
                    "can_transfer_and_upgrade_gifts": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can transfer and upgrade gifts owned by the business account"
                    },
                    "can_transfer_stars": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can transfer Telegram Stars received by the business account to its own account, or use them to upgrade and transfer gifts"
                    },
                    "can_view_gifts_and_stars": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can view gifts and the amount of Telegram Stars owned by the business account"
                    }
                },
                "description": "Represents the rights of a business bot.\n"
            },
            "BusinessConnection": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "integer",
                        "description": "Date the connection was established in Unix time"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the business connection"
                    },
                    "is_enabled": {
                        "type": "boolean",
                        "description": "True, if the connection is active"
                    },
                    "rights": {
                        "$ref": "#/components/schemas/BusinessBotRights",
                        "description": "Optional. Rights of the business bot"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Business account user that created the business connection"
                    },
                    "user_chat_id": {
                        "type": "integer",
                        "description": "Identifier of a private chat with the user who created the business connection. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier."
                    }
                },
                "description": "Describes the connection of the bot with a business account.\n"
            },
            "BusinessIntro": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Optional. Message text of the business intro"
                    },
                    "sticker": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "Optional. Sticker of the business intro"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title text of the business intro"
                    }
                },
                "description": "Contains information about the start page settings of a Telegram Business account.\n"
            },
            "BusinessLocation": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Address of the business"
                    },
                    "location": {
                        "$ref": "#/components/schemas/Location",
                        "description": "Optional. Location of the business"
                    }
                },
                "description": "Contains information about the location of a Telegram Business account.\n"
            },
            "BusinessMessagesDeleted": {
                "type": "object",
                "properties": {
                    "business_connection_id": {
                        "type": "string",
                        "description": "Unique identifier of the business connection"
                    },
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Information about a chat in the business account. The bot may not have access to the chat or the corresponding user."
                    },
                    "message_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The list of identifiers of deleted messages in the chat of the business account"
                    }
                },
                "description": "This object is received when messages are deleted from a connected business account.\n"
            },
            "BusinessOpeningHours": {
                "type": "object",
                "properties": {
                    "opening_hours": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessOpeningHoursInterval"
                        },
                        "description": "List of time intervals describing business opening hours"
                    },
                    "time_zone_name": {
                        "type": "string",
                        "description": "Unique name of the time zone for which the opening hours are defined"
                    }
                },
                "description": "Describes the opening hours of a business.\n"
            },
            "BusinessOpeningHoursInterval": {
                "type": "object",
                "properties": {
                    "closing_minute": {
                        "type": "integer",
                        "description": "The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60"
                    },
                    "opening_minute": {
                        "type": "integer",
                        "description": "The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60"
                    }
                },
                "description": "Describes an interval of time during which a business is open.\n"
            },
            "CallbackGame": {
                "type": "object",
                "description": "A placeholder, currently holds no information. Use BotFather to set up your game.\n"
            },
            "CallbackQuery": {
                "type": "object",
                "properties": {
                    "chat_instance": {
                        "type": "string",
                        "description": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games."
                    },
                    "data": {
                        "type": "string",
                        "description": "Optional. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data."
                    },
                    "from": {
                        "$ref": "#/components/schemas/User",
                        "description": "Sender"
                    },
                    "game_short_name": {
                        "type": "string",
                        "description": "Optional. Short name of a Game to be returned, serves as the unique identifier for the game"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this query"
                    },
                    "inline_message_id": {
                        "type": "string",
                        "description": "Optional. Identifier of the message sent via the bot in inline mode, that originated the query."
                    },
                    "message": {
                        "$ref": "#/components/schemas/MaybeInaccessibleMessage",
                        "description": "Optional. Message sent by the bot with the callback button that originated the query"
                    }
                },
                "description": "This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.\n"
            },
            "Chat": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "description": "Optional. First name of the other party in a private chat"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier."
                    },
                    "is_forum": {
                        "type": "boolean",
                        "description": "Optional. True, if the supergroup chat is a forum (has topics enabled)"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "Optional. Last name of the other party in a private chat"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title, for supergroups, channels and group chats"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the chat, can be either “private”, “group”, “supergroup” or “channel”"
                    },
                    "username": {
                        "type": "string",
                        "description": "Optional. Username, for private chats, supergroups and channels if available"
                    }
                },
                "description": "This object represents a chat.\n"
            },
            "ChatAdministratorRights": {
                "type": "object",
                "properties": {
                    "can_change_info": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to change the chat title, photo and other settings"
                    },
                    "can_delete_messages": {
                        "type": "boolean",
                        "description": "True, if the administrator can delete messages of other users"
                    },
                    "can_delete_stories": {
                        "type": "boolean",
                        "description": "True, if the administrator can delete stories posted by other users"
                    },
                    "can_edit_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only"
                    },
                    "can_edit_stories": {
                        "type": "boolean",
                        "description": "True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive"
                    },
                    "can_invite_users": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to invite new users to the chat"
                    },
                    "can_manage_chat": {
                        "type": "boolean",
                        "description": "True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars. Implied by any other administrator privilege."
                    },
                    "can_manage_topics": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only"
                    },
                    "can_manage_video_chats": {
                        "type": "boolean",
                        "description": "True, if the administrator can manage video chats"
                    },
                    "can_pin_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to pin messages; for groups and supergroups only"
                    },
                    "can_post_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only"
                    },
                    "can_post_stories": {
                        "type": "boolean",
                        "description": "True, if the administrator can post stories to the chat"
                    },
                    "can_promote_members": {
                        "type": "boolean",
                        "description": "True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)"
                    },
                    "can_restrict_members": {
                        "type": "boolean",
                        "description": "True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics"
                    },
                    "is_anonymous": {
                        "type": "boolean",
                        "description": "True, if the user's presence in the chat is hidden"
                    }
                },
                "description": "Represents the rights of an administrator in a chat.\n"
            },
            "ChatBackground": {
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/BackgroundType",
                        "description": "Type of the background"
                    }
                },
                "description": "This object represents a chat background.\n"
            },
            "ChatBoost": {
                "type": "object",
                "properties": {
                    "add_date": {
                        "type": "integer",
                        "description": "Point in time (Unix timestamp) when the chat was boosted"
                    },
                    "boost_id": {
                        "type": "string",
                        "description": "Unique identifier of the boost"
                    },
                    "expiration_date": {
                        "type": "integer",
                        "description": "Point in time (Unix timestamp) when the boost will automatically expire, unless the booster's Telegram Premium subscription is prolonged"
                    },
                    "source": {
                        "$ref": "#/components/schemas/ChatBoostSource",
                        "description": "Source of the added boost"
                    }
                },
                "description": "This object contains information about a chat boost.\n"
            },
            "ChatBoostAdded": {
                "type": "object",
                "properties": {
                    "boost_count": {
                        "type": "integer",
                        "description": "Number of boosts added by the user"
                    }
                },
                "description": "This object represents a service message about a user boosting a chat.\n"
            },
            "ChatBoostRemoved": {
                "type": "object",
                "properties": {
                    "boost_id": {
                        "type": "string",
                        "description": "Unique identifier of the boost"
                    },
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Chat which was boosted"
                    },
                    "remove_date": {
                        "type": "integer",
                        "description": "Point in time (Unix timestamp) when the boost was removed"
                    },
                    "source": {
                        "$ref": "#/components/schemas/ChatBoostSource",
                        "description": "Source of the removed boost"
                    }
                },
                "description": "This object represents a boost removed from a chat.\n"
            },
            "ChatBoostSource": {
                "type": "object",
                "description": "This object describes the source of a chat boost. It can be one of\n- ChatBoostSourcePremium\n- ChatBoostSourceGiftCode\n- ChatBoostSourceGiveaway\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ChatBoostSourcePremium"
                    },
                    {
                        "$ref": "#/components/schemas/ChatBoostSourceGiftCode"
                    },
                    {
                        "$ref": "#/components/schemas/ChatBoostSourceGiveaway"
                    }
                ]
            },
            "ChatBoostSourceGiftCode": {
                "type": "object",
                "properties": {
                    "source": {
                        "type": "string",
                        "description": "Source of the boost, always “gift_code”"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "User for which the gift code was created"
                    }
                },
                "description": "The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.\n"
            },
            "ChatBoostSourceGiveaway": {
                "type": "object",
                "properties": {
                    "giveaway_message_id": {
                        "type": "integer",
                        "description": "Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet."
                    },
                    "is_unclaimed": {
                        "type": "boolean",
                        "description": "Optional. True, if the giveaway was completed, but there was no user to win the prize"
                    },
                    "prize_star_count": {
                        "type": "integer",
                        "description": "Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only"
                    },
                    "source": {
                        "type": "string",
                        "description": "Source of the boost, always “giveaway”"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. User that won the prize in the giveaway if any; for Telegram Premium giveaways only"
                    }
                },
                "description": "The boost was obtained by the creation of a Telegram Premium or a Telegram Star giveaway. This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription for Telegram Premium giveaways and prize_star_count / 500 times for one year for Telegram Star giveaways.\n"
            },
            "ChatBoostSourcePremium": {
                "type": "object",
                "properties": {
                    "source": {
                        "type": "string",
                        "description": "Source of the boost, always “premium”"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "User that boosted the chat"
                    }
                },
                "description": "The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.\n"
            },
            "ChatBoostUpdated": {
                "type": "object",
                "properties": {
                    "boost": {
                        "$ref": "#/components/schemas/ChatBoost",
                        "description": "Information about the chat boost"
                    },
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Chat which was boosted"
                    }
                },
                "description": "This object represents a boost added to a chat or changed.\n"
            },
            "ChatFullInfo": {
                "type": "object",
                "properties": {
                    "accent_color_id": {
                        "type": "integer",
                        "description": "Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See accent colors for more details."
                    },
                    "accepted_gift_types": {
                        "$ref": "#/components/schemas/AcceptedGiftTypes",
                        "description": "Information about types of gifts that are accepted by the chat or by the corresponding user for private chats"
                    },
                    "active_usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels"
                    },
                    "available_reactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReactionType"
                        },
                        "description": "Optional. List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed."
                    },
                    "background_custom_emoji_id": {
                        "type": "string",
                        "description": "Optional. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background"
                    },
                    "bio": {
                        "type": "string",
                        "description": "Optional. Bio of the other party in a private chat"
                    },
                    "birthdate": {
                        "$ref": "#/components/schemas/Birthdate",
                        "description": "Optional. For private chats, the date of birth of the user"
                    },
                    "business_intro": {
                        "$ref": "#/components/schemas/BusinessIntro",
                        "description": "Optional. For private chats with business accounts, the intro of the business"
                    },
                    "business_location": {
                        "$ref": "#/components/schemas/BusinessLocation",
                        "description": "Optional. For private chats with business accounts, the location of the business"
                    },
                    "business_opening_hours": {
                        "$ref": "#/components/schemas/BusinessOpeningHours",
                        "description": "Optional. For private chats with business accounts, the opening hours of the business"
                    },
                    "can_send_paid_media": {
                        "type": "boolean",
                        "description": "Optional. True, if paid media messages can be sent or forwarded to the channel chat. The field is available only for channel chats."
                    },
                    "can_set_sticker_set": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can change the group sticker set"
                    },
                    "custom_emoji_sticker_set_name": {
                        "type": "string",
                        "description": "Optional. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group."
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional. Description, for groups, supergroups and channel chats"
                    },
                    "emoji_status_custom_emoji_id": {
                        "type": "string",
                        "description": "Optional. Custom emoji identifier of the emoji status of the chat or the other party in a private chat"
                    },
                    "emoji_status_expiration_date": {
                        "type": "integer",
                        "description": "Optional. Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any"
                    },
                    "first_name": {
                        "type": "string",
                        "description": "Optional. First name of the other party in a private chat"
                    },
                    "has_aggressive_anti_spam_enabled": {
                        "type": "boolean",
                        "description": "Optional. True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators."
                    },
                    "has_hidden_members": {
                        "type": "boolean",
                        "description": "Optional. True, if non-administrators can only get the list of bots and administrators in the chat"
                    },
                    "has_private_forwards": {
                        "type": "boolean",
                        "description": "Optional. True, if privacy settings of the other party in the private chat allows to use tg://user?id=\u003cuser_id\u003e links only in chats with the user"
                    },
                    "has_protected_content": {
                        "type": "boolean",
                        "description": "Optional. True, if messages from the chat can't be forwarded to other chats"
                    },
                    "has_restricted_voice_and_video_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat"
                    },
                    "has_visible_history": {
                        "type": "boolean",
                        "description": "Optional. True, if new chat members will have access to old messages; available only to chat administrators"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier."
                    },
                    "invite_link": {
                        "type": "string",
                        "description": "Optional. Primary invite link, for groups, supergroups and channel chats"
                    },
                    "is_forum": {
                        "type": "boolean",
                        "description": "Optional. True, if the supergroup chat is a forum (has topics enabled)"
                    },
                    "join_by_request": {
                        "type": "boolean",
                        "description": "Optional. True, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators"
                    },
                    "join_to_send_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if users need to join the supergroup before they can send messages"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "Optional. Last name of the other party in a private chat"
                    },
                    "linked_chat_id": {
                        "type": "integer",
                        "description": "Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier."
                    },
                    "location": {
                        "$ref": "#/components/schemas/ChatLocation",
                        "description": "Optional. For supergroups, the location to which the supergroup is connected"
                    },
                    "max_reaction_count": {
                        "type": "integer",
                        "description": "The maximum number of reactions that can be set on a message in the chat"
                    },
                    "message_auto_delete_time": {
                        "type": "integer",
                        "description": "Optional. The time after which all messages sent to the chat will be automatically deleted; in seconds"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/ChatPermissions",
                        "description": "Optional. Default chat member permissions, for groups and supergroups"
                    },
                    "personal_chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Optional. For private chats, the personal channel of the user"
                    },
                    "photo": {
                        "$ref": "#/components/schemas/ChatPhoto",
                        "description": "Optional. Chat photo"
                    },
                    "pinned_message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. The most recent pinned message (by sending date)"
                    },
                    "profile_accent_color_id": {
                        "type": "integer",
                        "description": "Optional. Identifier of the accent color for the chat's profile background. See profile accent colors for more details."
                    },
                    "profile_background_custom_emoji_id": {
                        "type": "string",
                        "description": "Optional. Custom emoji identifier of the emoji chosen by the chat for its profile background"
                    },
                    "slow_mode_delay": {
                        "type": "integer",
                        "description": "Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds"
                    },
                    "sticker_set_name": {
                        "type": "string",
                        "description": "Optional. For supergroups, name of the group sticker set"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title, for supergroups, channels and group chats"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the chat, can be either “private”, “group”, “supergroup” or “channel”"
                    },
                    "unrestrict_boost_count": {
                        "type": "integer",
                        "description": "Optional. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions"
                    },
                    "username": {
                        "type": "string",
                        "description": "Optional. Username, for private chats, supergroups and channels if available"
                    }
                },
                "description": "This object contains full information about a chat.\n"
            },
            "ChatInviteLink": {
                "type": "object",
                "properties": {
                    "creates_join_request": {
                        "type": "boolean",
                        "description": "True, if users joining the chat via the link need to be approved by chat administrators"
                    },
                    "creator": {
                        "$ref": "#/components/schemas/User",
                        "description": "Creator of the link"
                    },
                    "expire_date": {
                        "type": "integer",
                        "description": "Optional. Point in time (Unix timestamp) when the link will expire or has been expired"
                    },
                    "invite_link": {
                        "type": "string",
                        "description": "The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with “…”."
                    },
                    "is_primary": {
                        "type": "boolean",
                        "description": "True, if the link is primary"
                    },
                    "is_revoked": {
                        "type": "boolean",
                        "description": "True, if the link is revoked"
                    },
                    "member_limit": {
                        "type": "integer",
                        "description": "Optional. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional. Invite link name"
                    },
                    "pending_join_request_count": {
                        "type": "integer",
                        "description": "Optional. Number of pending join requests created using this link"
                    },
                    "subscription_period": {
                        "type": "integer",
                        "description": "Optional. The number of seconds the subscription will be active for before the next payment"
                    },
                    "subscription_price": {
                        "type": "integer",
                        "description": "Optional. The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat using the link"
                    }
                },
                "description": "Represents an invite link for a chat.\n"
            },
            "ChatJoinRequest": {
                "type": "object",
                "properties": {
                    "bio": {
                        "type": "string",
                        "description": "Optional. Bio of the user."
                    },
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Chat to which the request was sent"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Date the request was sent in Unix time"
                    },
                    "from": {
                        "$ref": "#/components/schemas/User",
                        "description": "User that sent the join request"
                    },
                    "invite_link": {
                        "$ref": "#/components/schemas/ChatInviteLink",
                        "description": "Optional. Chat invite link that was used by the user to send the join request"
                    },
                    "user_chat_id": {
                        "type": "integer",
                        "description": "Identifier of a private chat with the user who sent the join request. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user."
                    }
                },
                "description": "Represents a join request sent to a chat.\n"
            },
            "ChatLocation": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Location address; 1-64 characters, as defined by the chat owner"
                    },
                    "location": {
                        "$ref": "#/components/schemas/Location",
                        "description": "The location to which the supergroup is connected. Can't be a live location."
                    }
                },
                "description": "Represents a location to which a chat is connected.\n"
            },
            "ChatMember": {
                "type": "object",
                "description": "This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported:\n- ChatMemberOwner\n- ChatMemberAdministrator\n- ChatMemberMember\n- ChatMemberRestricted\n- ChatMemberLeft\n- ChatMemberBanned\n"
            },
            "ChatMemberAdministrator": {
                "type": "object",
                "properties": {
                    "can_be_edited": {
                        "type": "boolean",
                        "description": "True, if the bot is allowed to edit administrator privileges of that user"
                    },
                    "can_change_info": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to change the chat title, photo and other settings"
                    },
                    "can_delete_messages": {
                        "type": "boolean",
                        "description": "True, if the administrator can delete messages of other users"
                    },
                    "can_delete_stories": {
                        "type": "boolean",
                        "description": "True, if the administrator can delete stories posted by other users"
                    },
                    "can_edit_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only"
                    },
                    "can_edit_stories": {
                        "type": "boolean",
                        "description": "True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive"
                    },
                    "can_invite_users": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to invite new users to the chat"
                    },
                    "can_manage_chat": {
                        "type": "boolean",
                        "description": "True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars. Implied by any other administrator privilege."
                    },
                    "can_manage_topics": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only"
                    },
                    "can_manage_video_chats": {
                        "type": "boolean",
                        "description": "True, if the administrator can manage video chats"
                    },
                    "can_pin_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to pin messages; for groups and supergroups only"
                    },
                    "can_post_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only"
                    },
                    "can_post_stories": {
                        "type": "boolean",
                        "description": "True, if the administrator can post stories to the chat"
                    },
                    "can_promote_members": {
                        "type": "boolean",
                        "description": "True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)"
                    },
                    "can_restrict_members": {
                        "type": "boolean",
                        "description": "True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics"
                    },
                    "custom_title": {
                        "type": "string",
                        "description": "Optional. Custom title for this user"
                    },
                    "is_anonymous": {
                        "type": "boolean",
                        "description": "True, if the user's presence in the chat is hidden"
                    },
                    "status": {
                        "type": "string",
                        "description": "The member's status in the chat, always “administrator”"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Information about the user"
                    }
                },
                "description": "Represents a chat member that has some additional privileges.\n"
            },
            "ChatMemberBanned": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The member's status in the chat, always “kicked”"
                    },
                    "until_date": {
                        "type": "integer",
                        "description": "Date when restrictions will be lifted for this user; Unix time. If 0, then the user is banned forever"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Information about the user"
                    }
                },
                "description": "Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.\n"
            },
            "ChatMemberLeft": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The member's status in the chat, always “left”"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Information about the user"
                    }
                },
                "description": "Represents a chat member that isn't currently a member of the chat, but may join it themselves.\n"
            },
            "ChatMemberMember": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The member's status in the chat, always “member”"
                    },
                    "until_date": {
                        "type": "integer",
                        "description": "Optional. Date when the user's subscription will expire; Unix time"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Information about the user"
                    }
                },
                "description": "Represents a chat member that has no additional privileges or restrictions.\n"
            },
            "ChatMemberOwner": {
                "type": "object",
                "properties": {
                    "custom_title": {
                        "type": "string",
                        "description": "Optional. Custom title for this user"
                    },
                    "is_anonymous": {
                        "type": "boolean",
                        "description": "True, if the user's presence in the chat is hidden"
                    },
                    "status": {
                        "type": "string",
                        "description": "The member's status in the chat, always “creator”"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Information about the user"
                    }
                },
                "description": "Represents a chat member that owns the chat and has all administrator privileges.\n"
            },
            "ChatMemberRestricted": {
                "type": "object",
                "properties": {
                    "can_add_web_page_previews": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to add web page previews to their messages"
                    },
                    "can_change_info": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to change the chat title, photo and other settings"
                    },
                    "can_invite_users": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to invite new users to the chat"
                    },
                    "can_manage_topics": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to create forum topics"
                    },
                    "can_pin_messages": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to pin messages"
                    },
                    "can_send_audios": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to send audios"
                    },
                    "can_send_documents": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to send documents"
                    },
                    "can_send_messages": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues"
                    },
                    "can_send_other_messages": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to send animations, games, stickers and use inline bots"
                    },
                    "can_send_photos": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to send photos"
                    },
                    "can_send_polls": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to send polls and checklists"
                    },
                    "can_send_video_notes": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to send video notes"
                    },
                    "can_send_videos": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to send videos"
                    },
                    "can_send_voice_notes": {
                        "type": "boolean",
                        "description": "True, if the user is allowed to send voice notes"
                    },
                    "is_member": {
                        "type": "boolean",
                        "description": "True, if the user is a member of the chat at the moment of the request"
                    },
                    "status": {
                        "type": "string",
                        "description": "The member's status in the chat, always “restricted”"
                    },
                    "until_date": {
                        "type": "integer",
                        "description": "Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted forever"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Information about the user"
                    }
                },
                "description": "Represents a chat member that is under certain restrictions in the chat. Supergroups only.\n"
            },
            "ChatMemberUpdated": {
                "type": "object",
                "properties": {
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Chat the user belongs to"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Date the change was done in Unix time"
                    },
                    "from": {
                        "$ref": "#/components/schemas/User",
                        "description": "Performer of the action, which resulted in the change"
                    },
                    "invite_link": {
                        "$ref": "#/components/schemas/ChatInviteLink",
                        "description": "Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link events only."
                    },
                    "new_chat_member": {
                        "$ref": "#/components/schemas/ChatMember",
                        "description": "New information about the chat member"
                    },
                    "old_chat_member": {
                        "$ref": "#/components/schemas/ChatMember",
                        "description": "Previous information about the chat member"
                    },
                    "via_chat_folder_invite_link": {
                        "type": "boolean",
                        "description": "Optional. True, if the user joined the chat via a chat folder invite link"
                    },
                    "via_join_request": {
                        "type": "boolean",
                        "description": "Optional. True, if the user joined the chat after sending a direct join request without using an invite link and being approved by an administrator"
                    }
                },
                "description": "This object represents changes in the status of a chat member.\n"
            },
            "ChatPermissions": {
                "type": "object",
                "properties": {
                    "can_add_web_page_previews": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to add web page previews to their messages"
                    },
                    "can_change_info": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups"
                    },
                    "can_invite_users": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to invite new users to the chat"
                    },
                    "can_manage_topics": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to create forum topics. If omitted defaults to the value of can_pin_messages"
                    },
                    "can_pin_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to pin messages. Ignored in public supergroups"
                    },
                    "can_send_audios": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to send audios"
                    },
                    "can_send_documents": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to send documents"
                    },
                    "can_send_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues"
                    },
                    "can_send_other_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to send animations, games, stickers and use inline bots"
                    },
                    "can_send_photos": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to send photos"
                    },
                    "can_send_polls": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to send polls and checklists"
                    },
                    "can_send_video_notes": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to send video notes"
                    },
                    "can_send_videos": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to send videos"
                    },
                    "can_send_voice_notes": {
                        "type": "boolean",
                        "description": "Optional. True, if the user is allowed to send voice notes"
                    }
                },
                "description": "Describes actions that a non-administrator user is allowed to take in a chat.\n"
            },
            "ChatPhoto": {
                "type": "object",
                "properties": {
                    "big_file_id": {
                        "type": "string",
                        "description": "File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed."
                    },
                    "big_file_unique_id": {
                        "type": "string",
                        "description": "Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    },
                    "small_file_id": {
                        "type": "string",
                        "description": "File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed."
                    },
                    "small_file_unique_id": {
                        "type": "string",
                        "description": "Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    }
                },
                "description": "This object represents a chat photo.\n"
            },
            "ChatShared": {
                "type": "object",
                "properties": {
                    "chat_id": {
                        "type": "integer",
                        "description": "Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means."
                    },
                    "photo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhotoSize"
                        },
                        "description": "Optional. Available sizes of the chat photo, if the photo was requested by the bot"
                    },
                    "request_id": {
                        "type": "integer",
                        "description": "Identifier of the request"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title of the chat, if the title was requested by the bot."
                    },
                    "username": {
                        "type": "string",
                        "description": "Optional. Username of the chat, if the username was requested by the bot and available."
                    }
                },
                "description": "This object contains information about a chat that was shared with the bot using a KeyboardButtonRequestChat button.\n"
            },
            "Checklist": {
                "type": "object",
                "properties": {
                    "others_can_add_tasks": {
                        "type": "boolean",
                        "description": "Optional. True, if users other than the creator of the list can add tasks to the list"
                    },
                    "others_can_mark_tasks_as_done": {
                        "type": "boolean",
                        "description": "Optional. True, if users other than the creator of the list can mark tasks as done or not done"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChecklistTask"
                        },
                        "description": "List of tasks in the checklist"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the checklist"
                    },
                    "title_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. Special entities that appear in the checklist title"
                    }
                },
                "description": "Describes a checklist.\n"
            },
            "ChecklistTask": {
                "type": "object",
                "properties": {
                    "completed_by_user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. User that completed the task; omitted if the task wasn't completed"
                    },
                    "completion_date": {
                        "type": "integer",
                        "description": "Optional. Point in time (Unix timestamp) when the task was completed; 0 if the task wasn't completed"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier of the task"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of the task"
                    },
                    "text_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. Special entities that appear in the task text"
                    }
                },
                "description": "Describes a task in a checklist.\n"
            },
            "ChecklistTasksAdded": {
                "type": "object",
                "properties": {
                    "checklist_message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. Message containing the checklist to which the tasks were added. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply."
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChecklistTask"
                        },
                        "description": "List of tasks added to the checklist"
                    }
                },
                "description": "Describes a service message about tasks added to a checklist.\n"
            },
            "ChecklistTasksDone": {
                "type": "object",
                "properties": {
                    "checklist_message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. Message containing the checklist whose tasks were marked as done or not done. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply."
                    },
                    "marked_as_done_task_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Optional. Identifiers of the tasks that were marked as done"
                    },
                    "marked_as_not_done_task_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Optional. Identifiers of the tasks that were marked as not done"
                    }
                },
                "description": "Describes a service message about checklist tasks marked as done or not done.\n"
            },
            "ChosenInlineResult": {
                "type": "object",
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/User",
                        "description": "The user that chose the result"
                    },
                    "inline_message_id": {
                        "type": "string",
                        "description": "Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message."
                    },
                    "location": {
                        "$ref": "#/components/schemas/Location",
                        "description": "Optional. Sender location, only for bots that require user location"
                    },
                    "query": {
                        "type": "string",
                        "description": "The query that was used to obtain the result"
                    },
                    "result_id": {
                        "type": "string",
                        "description": "The unique identifier for the result that was chosen"
                    }
                },
                "description": "Represents a result of an inline query that was chosen by the user and sent to their chat partner.\n"
            },
            "Contact": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "description": "Contact's first name"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "Optional. Contact's last name"
                    },
                    "phone_number": {
                        "type": "string",
                        "description": "Contact's phone number"
                    },
                    "user_id": {
                        "type": "integer",
                        "description": "Optional. Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier."
                    },
                    "vcard": {
                        "type": "string",
                        "description": "Optional. Additional data about the contact in the form of a vCard"
                    }
                },
                "description": "This object represents a phone contact.\n"
            },
            "CopyTextButton": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "The text to be copied to the clipboard; 1-256 characters"
                    }
                },
                "description": "This object represents an inline keyboard button that copies specified text to the clipboard.\n"
            },
            "Dice": {
                "type": "object",
                "properties": {
                    "emoji": {
                        "type": "string",
                        "description": "Emoji on which the dice throw animation is based"
                    },
                    "value": {
                        "type": "integer",
                        "description": "Value of the dice, 1-6 for “”, “” and “” base emoji, 1-5 for “” and “” base emoji, 1-64 for “” base emoji"
                    }
                },
                "description": "This object represents an animated emoji that displays a random value.\n"
            },
            "DirectMessagePriceChanged": {
                "type": "object",
                "properties": {
                    "are_direct_messages_enabled": {
                        "type": "boolean",
                        "description": "True, if direct messages are enabled for the channel chat; false otherwise"
                    },
                    "direct_message_star_count": {
                        "type": "integer",
                        "description": "Optional. The new number of Telegram Stars that must be paid by users for each direct message sent to the channel. Does not apply to users who have been exempted by administrators. Defaults to 0."
                    }
                },
                "description": "Describes a service message about a change in the price of direct messages sent to a channel chat.\n"
            },
            "Document": {
                "type": "object",
                "properties": {
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_name": {
                        "type": "string",
                        "description": "Optional. Original filename as defined by the sender"
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value."
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    },
                    "mime_type": {
                        "type": "string",
                        "description": "Optional. MIME type of the file as defined by the sender"
                    },
                    "thumbnail": {
                        "$ref": "#/components/schemas/PhotoSize",
                        "description": "Optional. Document thumbnail as defined by the sender"
                    }
                },
                "description": "This object represents a general file (as opposed to photos, voice messages and audio files).\n"
            },
            "EncryptedCredentials": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication"
                    },
                    "hash": {
                        "type": "string",
                        "description": "Base64-encoded data hash for data authentication"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption"
                    }
                },
                "description": "Describes data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes.\n"
            },
            "EncryptedPassportElement": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "Optional. Base64-encoded encrypted Telegram Passport element data provided by the user; available only for “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport” and “address” types. Can be decrypted and verified using the accompanying EncryptedCredentials."
                    },
                    "email": {
                        "type": "string",
                        "description": "Optional. User's verified email address; available only for “email” type"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PassportFile"
                        },
                        "description": "Optional. Array of encrypted files with documents provided by the user; available only for “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying EncryptedCredentials."
                    },
                    "front_side": {
                        "$ref": "#/components/schemas/PassportFile",
                        "description": "Optional. Encrypted file with the front side of the document, provided by the user; available only for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying EncryptedCredentials."
                    },
                    "hash": {
                        "type": "string",
                        "description": "Base64-encoded element hash for using in PassportElementErrorUnspecified"
                    },
                    "phone_number": {
                        "type": "string",
                        "description": "Optional. User's verified phone number; available only for “phone_number” type"
                    },
                    "reverse_side": {
                        "$ref": "#/components/schemas/PassportFile",
                        "description": "Optional. Encrypted file with the reverse side of the document, provided by the user; available only for “driver_license” and “identity_card”. The file can be decrypted and verified using the accompanying EncryptedCredentials."
                    },
                    "selfie": {
                        "$ref": "#/components/schemas/PassportFile",
                        "description": "Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying EncryptedCredentials."
                    },
                    "translation": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PassportFile"
                        },
                        "description": "Optional. Array of encrypted files with translated versions of documents provided by the user; available if requested for “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying EncryptedCredentials."
                    },
                    "type": {
                        "type": "string",
                        "description": "Element type. One of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”, “phone_number”, “email”."
                    }
                },
                "description": "Describes documents or other Telegram Passport elements shared with the bot by the user.\n"
            },
            "ExternalReplyInfo": {
                "type": "object",
                "properties": {
                    "animation": {
                        "$ref": "#/components/schemas/Animation",
                        "description": "Optional. Message is an animation, information about the animation"
                    },
                    "audio": {
                        "$ref": "#/components/schemas/Audio",
                        "description": "Optional. Message is an audio file, information about the file"
                    },
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Optional. Chat the original message belongs to. Available only if the chat is a supergroup or a channel."
                    },
                    "checklist": {
                        "$ref": "#/components/schemas/Checklist",
                        "description": "Optional. Message is a checklist"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/Contact",
                        "description": "Optional. Message is a shared contact, information about the contact"
                    },
                    "dice": {
                        "$ref": "#/components/schemas/Dice",
                        "description": "Optional. Message is a dice with random value"
                    },
                    "document": {
                        "$ref": "#/components/schemas/Document",
                        "description": "Optional. Message is a general file, information about the file"
                    },
                    "game": {
                        "$ref": "#/components/schemas/Game",
                        "description": "Optional. Message is a game, information about the game. More about games »"
                    },
                    "giveaway": {
                        "$ref": "#/components/schemas/Giveaway",
                        "description": "Optional. Message is a scheduled giveaway, information about the giveaway"
                    },
                    "giveaway_winners": {
                        "$ref": "#/components/schemas/GiveawayWinners",
                        "description": "Optional. A giveaway with public winners was completed"
                    },
                    "has_media_spoiler": {
                        "type": "boolean",
                        "description": "Optional. True, if the message media is covered by a spoiler animation"
                    },
                    "invoice": {
                        "$ref": "#/components/schemas/Invoice",
                        "description": "Optional. Message is an invoice for a payment, information about the invoice. More about payments »"
                    },
                    "link_preview_options": {
                        "$ref": "#/components/schemas/LinkPreviewOptions",
                        "description": "Optional. Options used for link preview generation for the original message, if it is a text message"
                    },
                    "location": {
                        "$ref": "#/components/schemas/Location",
                        "description": "Optional. Message is a shared location, information about the location"
                    },
                    "message_id": {
                        "type": "integer",
                        "description": "Optional. Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel."
                    },
                    "origin": {
                        "$ref": "#/components/schemas/MessageOrigin",
                        "description": "Origin of the message replied to by the given message"
                    },
                    "paid_media": {
                        "$ref": "#/components/schemas/PaidMediaInfo",
                        "description": "Optional. Message contains paid media; information about the paid media"
                    },
                    "photo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhotoSize"
                        },
                        "description": "Optional. Message is a photo, available sizes of the photo"
                    },
                    "poll": {
                        "$ref": "#/components/schemas/Poll",
                        "description": "Optional. Message is a native poll, information about the poll"
                    },
                    "sticker": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "Optional. Message is a sticker, information about the sticker"
                    },
                    "story": {
                        "$ref": "#/components/schemas/Story",
                        "description": "Optional. Message is a forwarded story"
                    },
                    "venue": {
                        "$ref": "#/components/schemas/Venue",
                        "description": "Optional. Message is a venue, information about the venue"
                    },
                    "video": {
                        "$ref": "#/components/schemas/Video",
                        "description": "Optional. Message is a video, information about the video"
                    },
                    "video_note": {
                        "$ref": "#/components/schemas/VideoNote",
                        "description": "Optional. Message is a video note, information about the video message"
                    },
                    "voice": {
                        "$ref": "#/components/schemas/Voice",
                        "description": "Optional. Message is a voice message, information about the file"
                    }
                },
                "description": "This object contains information about a message that is being replied to, which may come from another chat or forum topic.\n"
            },
            "File": {
                "type": "object",
                "properties": {
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_path": {
                        "type": "string",
                        "description": "Optional. File path. Use https://api.telegram.org/file/bot\u003ctoken\u003e/\u003cfile_path\u003e to get the file."
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value."
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    }
                },
                "description": "This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot\u003ctoken\u003e/\u003cfile_path\u003e. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.\n"
            },
            "ForceReply": {
                "type": "object",
                "properties": {
                    "force_reply": {
                        "type": "boolean",
                        "description": "Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'"
                    },
                    "input_field_placeholder": {
                        "type": "string",
                        "description": "Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters"
                    },
                    "selective": {
                        "type": "boolean",
                        "description": "Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message."
                    }
                },
                "description": "Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode. Not supported in channels and for messages sent on behalf of a Telegram Business account.\n"
            },
            "ForumTopic": {
                "type": "object",
                "properties": {
                    "icon_color": {
                        "type": "integer",
                        "description": "Color of the topic icon in RGB format"
                    },
                    "icon_custom_emoji_id": {
                        "type": "string",
                        "description": "Optional. Unique identifier of the custom emoji shown as the topic icon"
                    },
                    "message_thread_id": {
                        "type": "integer",
                        "description": "Unique identifier of the forum topic"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the topic"
                    }
                },
                "description": "This object represents a forum topic.\n"
            },
            "ForumTopicClosed": {
                "type": "object",
                "description": "This object represents a service message about a forum topic closed in the chat. Currently holds no information.\n"
            },
            "ForumTopicCreated": {
                "type": "object",
                "properties": {
                    "icon_color": {
                        "type": "integer",
                        "description": "Color of the topic icon in RGB format"
                    },
                    "icon_custom_emoji_id": {
                        "type": "string",
                        "description": "Optional. Unique identifier of the custom emoji shown as the topic icon"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the topic"
                    }
                },
                "description": "This object represents a service message about a new forum topic created in the chat.\n"
            },
            "ForumTopicEdited": {
                "type": "object",
                "properties": {
                    "icon_custom_emoji_id": {
                        "type": "string",
                        "description": "Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional. New name of the topic, if it was edited"
                    }
                },
                "description": "This object represents a service message about an edited forum topic.\n"
            },
            "ForumTopicReopened": {
                "type": "object",
                "description": "This object represents a service message about a forum topic reopened in the chat. Currently holds no information.\n"
            },
            "Game": {
                "type": "object",
                "properties": {
                    "animation": {
                        "$ref": "#/components/schemas/Animation",
                        "description": "Optional. Animation that will be displayed in the game message in chats. Upload via BotFather"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the game"
                    },
                    "photo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhotoSize"
                        },
                        "description": "Photo that will be displayed in the game message in chats."
                    },
                    "text": {
                        "type": "string",
                        "description": "Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters."
                    },
                    "text_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc."
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the game"
                    }
                },
                "description": "This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.\n"
            },
            "GameHighScore": {
                "type": "object",
                "properties": {
                    "position": {
                        "type": "integer",
                        "description": "Position in high score table for the game"
                    },
                    "score": {
                        "type": "integer",
                        "description": "Score"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "User"
                    }
                },
                "description": "This object represents one row of the high scores table for a game.\n"
            },
            "GeneralForumTopicHidden": {
                "type": "object",
                "description": "This object represents a service message about General forum topic hidden in the chat. Currently holds no information.\n"
            },
            "GeneralForumTopicUnhidden": {
                "type": "object",
                "description": "This object represents a service message about General forum topic unhidden in the chat. Currently holds no information.\n"
            },
            "Gift": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the gift"
                    },
                    "remaining_count": {
                        "type": "integer",
                        "description": "Optional. The number of remaining gifts of this type that can be sent; for limited gifts only"
                    },
                    "star_count": {
                        "type": "integer",
                        "description": "The number of Telegram Stars that must be paid to send the sticker"
                    },
                    "sticker": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "The sticker that represents the gift"
                    },
                    "total_count": {
                        "type": "integer",
                        "description": "Optional. The total number of the gifts of this type that can be sent; for limited gifts only"
                    },
                    "upgrade_star_count": {
                        "type": "integer",
                        "description": "Optional. The number of Telegram Stars that must be paid to upgrade the gift to a unique one"
                    }
                },
                "description": "This object represents a gift that can be sent by the bot.\n"
            },
            "GiftInfo": {
                "type": "object",
                "properties": {
                    "can_be_upgraded": {
                        "type": "boolean",
                        "description": "Optional. True, if the gift can be upgraded to a unique gift"
                    },
                    "convert_star_count": {
                        "type": "integer",
                        "description": "Optional. Number of Telegram Stars that can be claimed by the receiver by converting the gift; omitted if conversion to Telegram Stars is impossible"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. Special entities that appear in the text"
                    },
                    "gift": {
                        "$ref": "#/components/schemas/Gift",
                        "description": "Information about the gift"
                    },
                    "is_private": {
                        "type": "boolean",
                        "description": "Optional. True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them"
                    },
                    "owned_gift_id": {
                        "type": "string",
                        "description": "Optional. Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts"
                    },
                    "prepaid_upgrade_star_count": {
                        "type": "integer",
                        "description": "Optional. Number of Telegram Stars that were prepaid by the sender for the ability to upgrade the gift"
                    },
                    "text": {
                        "type": "string",
                        "description": "Optional. Text of the message that was added to the gift"
                    }
                },
                "description": "Describes a service message about a regular gift that was sent or received.\n"
            },
            "Gifts": {
                "type": "object",
                "properties": {
                    "gifts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Gift"
                        },
                        "description": "The list of gifts"
                    }
                },
                "description": "This object represent a list of gifts.\n"
            },
            "Giveaway": {
                "type": "object",
                "properties": {
                    "chats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Chat"
                        },
                        "description": "The list of chats which the user must join to participate in the giveaway"
                    },
                    "country_codes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Optional. A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways."
                    },
                    "has_public_winners": {
                        "type": "boolean",
                        "description": "Optional. True, if the list of giveaway winners will be visible to everyone"
                    },
                    "only_new_members": {
                        "type": "boolean",
                        "description": "Optional. True, if only users who join the chats after the giveaway started should be eligible to win"
                    },
                    "premium_subscription_month_count": {
                        "type": "integer",
                        "description": "Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only"
                    },
                    "prize_description": {
                        "type": "string",
                        "description": "Optional. Description of additional giveaway prize"
                    },
                    "prize_star_count": {
                        "type": "integer",
                        "description": "Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only"
                    },
                    "winner_count": {
                        "type": "integer",
                        "description": "The number of users which are supposed to be selected as winners of the giveaway"
                    },
                    "winners_selection_date": {
                        "type": "integer",
                        "description": "Point in time (Unix timestamp) when winners of the giveaway will be selected"
                    }
                },
                "description": "This object represents a message about a scheduled giveaway.\n"
            },
            "GiveawayCompleted": {
                "type": "object",
                "properties": {
                    "giveaway_message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. Message with the giveaway that was completed, if it wasn't deleted"
                    },
                    "is_star_giveaway": {
                        "type": "boolean",
                        "description": "Optional. True, if the giveaway is a Telegram Star giveaway. Otherwise, currently, the giveaway is a Telegram Premium giveaway."
                    },
                    "unclaimed_prize_count": {
                        "type": "integer",
                        "description": "Optional. Number of undistributed prizes"
                    },
                    "winner_count": {
                        "type": "integer",
                        "description": "Number of winners in the giveaway"
                    }
                },
                "description": "This object represents a service message about the completion of a giveaway without public winners.\n"
            },
            "GiveawayCreated": {
                "type": "object",
                "properties": {
                    "prize_star_count": {
                        "type": "integer",
                        "description": "Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only"
                    }
                },
                "description": "This object represents a service message about the creation of a scheduled giveaway.\n"
            },
            "GiveawayWinners": {
                "type": "object",
                "properties": {
                    "additional_chat_count": {
                        "type": "integer",
                        "description": "Optional. The number of other chats the user had to join in order to be eligible for the giveaway"
                    },
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "The chat that created the giveaway"
                    },
                    "giveaway_message_id": {
                        "type": "integer",
                        "description": "Identifier of the message with the giveaway in the chat"
                    },
                    "only_new_members": {
                        "type": "boolean",
                        "description": "Optional. True, if only users who had joined the chats after the giveaway started were eligible to win"
                    },
                    "premium_subscription_month_count": {
                        "type": "integer",
                        "description": "Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only"
                    },
                    "prize_description": {
                        "type": "string",
                        "description": "Optional. Description of additional giveaway prize"
                    },
                    "prize_star_count": {
                        "type": "integer",
                        "description": "Optional. The number of Telegram Stars that were split between giveaway winners; for Telegram Star giveaways only"
                    },
                    "unclaimed_prize_count": {
                        "type": "integer",
                        "description": "Optional. Number of undistributed prizes"
                    },
                    "was_refunded": {
                        "type": "boolean",
                        "description": "Optional. True, if the giveaway was canceled because the payment for it was refunded"
                    },
                    "winner_count": {
                        "type": "integer",
                        "description": "Total number of winners in the giveaway"
                    },
                    "winners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "description": "List of up to 100 winners of the giveaway"
                    },
                    "winners_selection_date": {
                        "type": "integer",
                        "description": "Point in time (Unix timestamp) when winners of the giveaway were selected"
                    }
                },
                "description": "This object represents a message about the completion of a giveaway with public winners.\n"
            },
            "InaccessibleMessage": {
                "type": "object",
                "properties": {
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Chat the message belonged to"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Always 0. The field can be used to differentiate regular and inaccessible messages."
                    },
                    "message_id": {
                        "type": "integer",
                        "description": "Unique message identifier inside the chat"
                    }
                },
                "description": "This object describes a message that was deleted or is otherwise inaccessible to the bot.\n"
            },
            "InlineKeyboardButton": {
                "type": "object",
                "properties": {
                    "callback_data": {
                        "type": "string",
                        "description": "Optional. Data to be sent in a callback query to the bot when the button is pressed, 1-64 bytes"
                    },
                    "callback_game": {
                        "$ref": "#/components/schemas/CallbackGame",
                        "description": "Optional. Description of the game that will be launched when the user presses the button.NOTE: This type of button must always be the first button in the first row."
                    },
                    "copy_text": {
                        "$ref": "#/components/schemas/CopyTextButton",
                        "description": "Optional. Description of the button that copies the specified text to the clipboard."
                    },
                    "login_url": {
                        "$ref": "#/components/schemas/LoginUrl",
                        "description": "Optional. An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget."
                    },
                    "pay": {
                        "type": "boolean",
                        "description": "Optional. Specify True, to send a Pay button. Substrings “” and “XTR” in the buttons's text will be replaced with a Telegram Star icon.NOTE: This type of button must always be the first button in the first row and can only be used in invoice messages."
                    },
                    "switch_inline_query": {
                        "type": "string",
                        "description": "Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account."
                    },
                    "switch_inline_query_chosen_chat": {
                        "$ref": "#/components/schemas/SwitchInlineQueryChosenChat",
                        "description": "Optional. If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account."
                    },
                    "switch_inline_query_current_chat": {
                        "type": "string",
                        "description": "Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted.This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account."
                    },
                    "text": {
                        "type": "string",
                        "description": "Label text on the button"
                    },
                    "url": {
                        "type": "string",
                        "description": "Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=\u003cuser_id\u003e can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings."
                    },
                    "web_app": {
                        "$ref": "#/components/schemas/WebAppInfo",
                        "description": "Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account."
                    }
                },
                "description": "This object represents one button of an inline keyboard. Exactly one of the optional fields must be used to specify type of the button.\n"
            },
            "InlineKeyboardMarkup": {
                "type": "object",
                "properties": {
                    "inline_keyboard": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/InlineKeyboardButton"
                            }
                        },
                        "description": "Array of button rows, each represented by an Array of InlineKeyboardButton objects"
                    }
                },
                "description": "This object represents an inline keyboard that appears right next to the message it belongs to.\n"
            },
            "InlineQuery": {
                "type": "object",
                "properties": {
                    "chat_type": {
                        "type": "string",
                        "description": "Optional. Type of the chat from which the inline query was sent. Can be either “sender” for a private chat with the inline query sender, “private”, “group”, “supergroup”, or “channel”. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat"
                    },
                    "from": {
                        "$ref": "#/components/schemas/User",
                        "description": "Sender"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this query"
                    },
                    "location": {
                        "$ref": "#/components/schemas/Location",
                        "description": "Optional. Sender location, only for bots that request user location"
                    },
                    "offset": {
                        "type": "string",
                        "description": "Offset of the results to be returned, can be controlled by the bot"
                    },
                    "query": {
                        "type": "string",
                        "description": "Text of the query (up to 256 characters)"
                    }
                },
                "description": "This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.\n"
            },
            "InlineQueryResult": {
                "type": "object",
                "description": "This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:\n- InlineQueryResultCachedAudio\n- InlineQueryResultCachedDocument\n- InlineQueryResultCachedGif\n- InlineQueryResultCachedMpeg4Gif\n- InlineQueryResultCachedPhoto\n- InlineQueryResultCachedSticker\n- InlineQueryResultCachedVideo\n- InlineQueryResultCachedVoice\n- InlineQueryResultArticle\n- InlineQueryResultAudio\n- InlineQueryResultContact\n- InlineQueryResultGame\n- InlineQueryResultDocument\n- InlineQueryResultGif\n- InlineQueryResultLocation\n- InlineQueryResultMpeg4Gif\n- InlineQueryResultPhoto\n- InlineQueryResultVenue\n- InlineQueryResultVideo\n- InlineQueryResultVoice\nNote: All URLs passed in inline query results will be available to end users and therefore must be assumed to be public.\n"
            },
            "InlineQueryResultArticle": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Optional. Short description of the result"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 Bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Content of the message to be sent"
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "thumbnail_height": {
                        "type": "integer",
                        "description": "Optional. Thumbnail height"
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "Optional. Url of the thumbnail for the result"
                    },
                    "thumbnail_width": {
                        "type": "integer",
                        "description": "Optional. Thumbnail width"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be article"
                    },
                    "url": {
                        "type": "string",
                        "description": "Optional. URL of the result"
                    }
                },
                "description": "Represents a link to an article or web page.\n"
            },
            "InlineQueryResultAudio": {
                "type": "object",
                "properties": {
                    "audio_duration": {
                        "type": "integer",
                        "description": "Optional. Audio duration in seconds"
                    },
                    "audio_url": {
                        "type": "string",
                        "description": "A valid URL for the audio file"
                    },
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the audio"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the audio caption. See formatting options for more details."
                    },
                    "performer": {
                        "type": "string",
                        "description": "Optional. Performer"
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be audio"
                    }
                },
                "description": "Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.\n"
            },
            "InlineQueryResultCachedAudio": {
                "type": "object",
                "properties": {
                    "audio_file_id": {
                        "type": "string",
                        "description": "A valid file identifier for the audio file"
                    },
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the audio"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the audio caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be audio"
                    }
                },
                "description": "Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.\n"
            },
            "InlineQueryResultCachedDocument": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the document to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional. Short description of the result"
                    },
                    "document_file_id": {
                        "type": "string",
                        "description": "A valid file identifier for the file"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the file"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the document caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be document"
                    }
                },
                "description": "Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.\n"
            },
            "InlineQueryResultCachedGif": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "gif_file_id": {
                        "type": "string",
                        "description": "A valid file identifier for the GIF file"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the GIF animation"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be gif"
                    }
                },
                "description": "Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.\n"
            },
            "InlineQueryResultCachedMpeg4Gif": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the video animation"
                    },
                    "mpeg4_file_id": {
                        "type": "string",
                        "description": "A valid file identifier for the MPEG4 file"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be mpeg4_gif"
                    }
                },
                "description": "Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.\n"
            },
            "InlineQueryResultCachedPhoto": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional. Short description of the result"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the photo"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the photo caption. See formatting options for more details."
                    },
                    "photo_file_id": {
                        "type": "string",
                        "description": "A valid file identifier of the photo"
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be photo"
                    }
                },
                "description": "Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.\n"
            },
            "InlineQueryResultCachedSticker": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the sticker"
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "sticker_file_id": {
                        "type": "string",
                        "description": "A valid file identifier of the sticker"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be sticker"
                    }
                },
                "description": "Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.\n"
            },
            "InlineQueryResultCachedVideo": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the video to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional. Short description of the result"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the video"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the video caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be video"
                    },
                    "video_file_id": {
                        "type": "string",
                        "description": "A valid file identifier for the video file"
                    }
                },
                "description": "Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.\n"
            },
            "InlineQueryResultCachedVoice": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the voice message"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the voice message caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "title": {
                        "type": "string",
                        "description": "Voice message title"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be voice"
                    },
                    "voice_file_id": {
                        "type": "string",
                        "description": "A valid file identifier for the voice message"
                    }
                },
                "description": "Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.\n"
            },
            "InlineQueryResultContact": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "description": "Contact's first name"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 Bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the contact"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "Optional. Contact's last name"
                    },
                    "phone_number": {
                        "type": "string",
                        "description": "Contact's phone number"
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "thumbnail_height": {
                        "type": "integer",
                        "description": "Optional. Thumbnail height"
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "Optional. Url of the thumbnail for the result"
                    },
                    "thumbnail_width": {
                        "type": "integer",
                        "description": "Optional. Thumbnail width"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be contact"
                    },
                    "vcard": {
                        "type": "string",
                        "description": "Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes"
                    }
                },
                "description": "Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.\n"
            },
            "InlineQueryResultDocument": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the document to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional. Short description of the result"
                    },
                    "document_url": {
                        "type": "string",
                        "description": "A valid URL for the file"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the file"
                    },
                    "mime_type": {
                        "type": "string",
                        "description": "MIME type of the content of the file, either “application/pdf” or “application/zip”"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the document caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "thumbnail_height": {
                        "type": "integer",
                        "description": "Optional. Thumbnail height"
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "Optional. URL of the thumbnail (JPEG only) for the file"
                    },
                    "thumbnail_width": {
                        "type": "integer",
                        "description": "Optional. Thumbnail width"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be document"
                    }
                },
                "description": "Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.\n"
            },
            "InlineQueryResultGame": {
                "type": "object",
                "properties": {
                    "game_short_name": {
                        "type": "string",
                        "description": "Short name of the game"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be game"
                    }
                },
                "description": "Represents a Game.\n"
            },
            "InlineQueryResultGif": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "gif_duration": {
                        "type": "integer",
                        "description": "Optional. Duration of the GIF in seconds"
                    },
                    "gif_height": {
                        "type": "integer",
                        "description": "Optional. Height of the GIF"
                    },
                    "gif_url": {
                        "type": "string",
                        "description": "A valid URL for the GIF file"
                    },
                    "gif_width": {
                        "type": "integer",
                        "description": "Optional. Width of the GIF"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the GIF animation"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "thumbnail_mime_type": {
                        "type": "string",
                        "description": "Optional. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”"
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be gif"
                    }
                },
                "description": "Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.\n"
            },
            "InlineQueryResultLocation": {
                "type": "object",
                "properties": {
                    "heading": {
                        "type": "integer",
                        "description": "Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified."
                    },
                    "horizontal_accuracy": {
                        "type": "number",
                        "description": "Optional. The radius of uncertainty for the location, measured in meters; 0-1500"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 Bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the location"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Location latitude in degrees"
                    },
                    "live_period": {
                        "type": "integer",
                        "description": "Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely."
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Location longitude in degrees"
                    },
                    "proximity_alert_radius": {
                        "type": "integer",
                        "description": "Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "thumbnail_height": {
                        "type": "integer",
                        "description": "Optional. Thumbnail height"
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "Optional. Url of the thumbnail for the result"
                    },
                    "thumbnail_width": {
                        "type": "integer",
                        "description": "Optional. Thumbnail width"
                    },
                    "title": {
                        "type": "string",
                        "description": "Location title"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be location"
                    }
                },
                "description": "Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.\n"
            },
            "InlineQueryResultMpeg4Gif": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the video animation"
                    },
                    "mpeg4_duration": {
                        "type": "integer",
                        "description": "Optional. Video duration in seconds"
                    },
                    "mpeg4_height": {
                        "type": "integer",
                        "description": "Optional. Video height"
                    },
                    "mpeg4_url": {
                        "type": "string",
                        "description": "A valid URL for the MPEG4 file"
                    },
                    "mpeg4_width": {
                        "type": "integer",
                        "description": "Optional. Video width"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "thumbnail_mime_type": {
                        "type": "string",
                        "description": "Optional. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”"
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be mpeg4_gif"
                    }
                },
                "description": "Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.\n"
            },
            "InlineQueryResultPhoto": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional. Short description of the result"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the photo"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the photo caption. See formatting options for more details."
                    },
                    "photo_height": {
                        "type": "integer",
                        "description": "Optional. Height of the photo"
                    },
                    "photo_url": {
                        "type": "string",
                        "description": "A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB"
                    },
                    "photo_width": {
                        "type": "integer",
                        "description": "Optional. Width of the photo"
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "URL of the thumbnail for the photo"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be photo"
                    }
                },
                "description": "Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.\n"
            },
            "InlineQueryResultVenue": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Address of the venue"
                    },
                    "foursquare_id": {
                        "type": "string",
                        "description": "Optional. Foursquare identifier of the venue if known"
                    },
                    "foursquare_type": {
                        "type": "string",
                        "description": "Optional. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)"
                    },
                    "google_place_id": {
                        "type": "string",
                        "description": "Optional. Google Places identifier of the venue"
                    },
                    "google_place_type": {
                        "type": "string",
                        "description": "Optional. Google Places type of the venue. (See supported types.)"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 Bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the venue"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude of the venue location in degrees"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude of the venue location in degrees"
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "thumbnail_height": {
                        "type": "integer",
                        "description": "Optional. Thumbnail height"
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "Optional. Url of the thumbnail for the result"
                    },
                    "thumbnail_width": {
                        "type": "integer",
                        "description": "Optional. Thumbnail width"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the venue"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be venue"
                    }
                },
                "description": "Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.\n"
            },
            "InlineQueryResultVideo": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the video to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional. Short description of the result"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video)."
                    },
                    "mime_type": {
                        "type": "string",
                        "description": "MIME type of the content of the video URL, “text/html” or “video/mp4”"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the video caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "URL of the thumbnail (JPEG only) for the video"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title for the result"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be video"
                    },
                    "video_duration": {
                        "type": "integer",
                        "description": "Optional. Video duration in seconds"
                    },
                    "video_height": {
                        "type": "integer",
                        "description": "Optional. Video height"
                    },
                    "video_url": {
                        "type": "string",
                        "description": "A valid URL for the embedded video player or video file"
                    },
                    "video_width": {
                        "type": "integer",
                        "description": "Optional. Video width"
                    }
                },
                "description": "Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.\n"
            },
            "InlineQueryResultVoice": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this result, 1-64 bytes"
                    },
                    "input_message_content": {
                        "$ref": "#/components/schemas/InputMessageContent",
                        "description": "Optional. Content of the message to be sent instead of the voice recording"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the voice message caption. See formatting options for more details."
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message"
                    },
                    "title": {
                        "type": "string",
                        "description": "Recording title"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be voice"
                    },
                    "voice_duration": {
                        "type": "integer",
                        "description": "Optional. Recording duration in seconds"
                    },
                    "voice_url": {
                        "type": "string",
                        "description": "A valid URL for the voice recording"
                    }
                },
                "description": "Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.\n"
            },
            "InlineQueryResultsButton": {
                "type": "object",
                "properties": {
                    "start_parameter": {
                        "type": "string",
                        "description": "Optional. Deep-linking parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed.Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities."
                    },
                    "text": {
                        "type": "string",
                        "description": "Label text on the button"
                    },
                    "web_app": {
                        "$ref": "#/components/schemas/WebAppInfo",
                        "description": "Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to switch back to the inline mode using the method switchInlineQuery inside the Web App."
                    }
                },
                "description": "This object represents a button to be shown above inline query results. You must use exactly one of the optional fields.\n"
            },
            "InputChecklist": {
                "type": "object",
                "properties": {
                    "others_can_add_tasks": {
                        "type": "boolean",
                        "description": "Optional. Pass True if other users can add tasks to the checklist"
                    },
                    "others_can_mark_tasks_as_done": {
                        "type": "boolean",
                        "description": "Optional. Pass True if other users can mark tasks as done or not done in the checklist"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the title. See formatting options for more details."
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InputChecklistTask"
                        },
                        "description": "List of 1-30 tasks in the checklist"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the checklist; 1-255 characters after entities parsing"
                    },
                    "title_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the title, which can be specified instead of parse_mode. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are allowed."
                    }
                },
                "description": "Describes a checklist to create.\n"
            },
            "InputChecklistTask": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier of the task; must be positive and unique among all task identifiers currently present in the checklist"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the text. See formatting options for more details."
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of the task; 1-100 characters after entities parsing"
                    },
                    "text_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the text, which can be specified instead of parse_mode. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are allowed."
                    }
                },
                "description": "Describes a task to add to a checklist.\n"
            },
            "InputContactMessageContent": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "description": "Contact's first name"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "Optional. Contact's last name"
                    },
                    "phone_number": {
                        "type": "string",
                        "description": "Contact's phone number"
                    },
                    "vcard": {
                        "type": "string",
                        "description": "Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes"
                    }
                },
                "description": "Represents the content of a contact message to be sent as the result of an inline query.\n"
            },
            "InputFile": {
                "type": "object",
                "description": "This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.\n"
            },
            "InputInvoiceMessageContent": {
                "type": "object",
                "properties": {
                    "currency": {
                        "type": "string",
                        "description": "Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars."
                    },
                    "description": {
                        "type": "string",
                        "description": "Product description, 1-255 characters"
                    },
                    "is_flexible": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the final price depends on the shipping method. Ignored for payments in Telegram Stars."
                    },
                    "max_tip_amount": {
                        "type": "integer",
                        "description": "Optional. The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in Telegram Stars."
                    },
                    "need_email": {
                        "type": "boolean",
                        "description": "Optional. Pass True if you require the user's email address to complete the order. Ignored for payments in Telegram Stars."
                    },
                    "need_name": {
                        "type": "boolean",
                        "description": "Optional. Pass True if you require the user's full name to complete the order. Ignored for payments in Telegram Stars."
                    },
                    "need_phone_number": {
                        "type": "boolean",
                        "description": "Optional. Pass True if you require the user's phone number to complete the order. Ignored for payments in Telegram Stars."
                    },
                    "need_shipping_address": {
                        "type": "boolean",
                        "description": "Optional. Pass True if you require the user's shipping address to complete the order. Ignored for payments in Telegram Stars."
                    },
                    "payload": {
                        "type": "string",
                        "description": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes."
                    },
                    "photo_height": {
                        "type": "integer",
                        "description": "Optional. Photo height"
                    },
                    "photo_size": {
                        "type": "integer",
                        "description": "Optional. Photo size in bytes"
                    },
                    "photo_url": {
                        "type": "string",
                        "description": "Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service."
                    },
                    "photo_width": {
                        "type": "integer",
                        "description": "Optional. Photo width"
                    },
                    "prices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LabeledPrice"
                        },
                        "description": "Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in Telegram Stars."
                    },
                    "provider_data": {
                        "type": "string",
                        "description": "Optional. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider."
                    },
                    "provider_token": {
                        "type": "string",
                        "description": "Optional. Payment provider token, obtained via @BotFather. Pass an empty string for payments in Telegram Stars."
                    },
                    "send_email_to_provider": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the user's email address should be sent to the provider. Ignored for payments in Telegram Stars."
                    },
                    "send_phone_number_to_provider": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the user's phone number should be sent to the provider. Ignored for payments in Telegram Stars."
                    },
                    "suggested_tip_amounts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Optional. A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount."
                    },
                    "title": {
                        "type": "string",
                        "description": "Product name, 1-32 characters"
                    }
                },
                "description": "Represents the content of an invoice message to be sent as the result of an inline query.\n"
            },
            "InputLocationMessageContent": {
                "type": "object",
                "properties": {
                    "heading": {
                        "type": "integer",
                        "description": "Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified."
                    },
                    "horizontal_accuracy": {
                        "type": "number",
                        "description": "Optional. The radius of uncertainty for the location, measured in meters; 0-1500"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude of the location in degrees"
                    },
                    "live_period": {
                        "type": "integer",
                        "description": "Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely."
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude of the location in degrees"
                    },
                    "proximity_alert_radius": {
                        "type": "integer",
                        "description": "Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified."
                    }
                },
                "description": "Represents the content of a location message to be sent as the result of an inline query.\n"
            },
            "InputMedia": {
                "type": "object",
                "description": "This object represents the content of a media message to be sent. It should be one of\n- InputMediaAnimation\n- InputMediaDocument\n- InputMediaAudio\n- InputMediaPhoto\n- InputMediaVideo\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/InputMediaAnimation"
                    },
                    {
                        "$ref": "#/components/schemas/InputMediaDocument"
                    },
                    {
                        "$ref": "#/components/schemas/InputMediaAudio"
                    },
                    {
                        "$ref": "#/components/schemas/InputMediaPhoto"
                    },
                    {
                        "$ref": "#/components/schemas/InputMediaVideo"
                    }
                ]
            },
            "InputMediaAnimation": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Optional. Animation duration in seconds"
                    },
                    "has_spoiler": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the animation needs to be covered with a spoiler animation"
                    },
                    "height": {
                        "type": "integer",
                        "description": "Optional. Animation height"
                    },
                    "media": {
                        "type": "string",
                        "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More information on Sending Files »"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the animation caption. See formatting options for more details."
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile_attach_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile_attach_name\u003e. More information on Sending Files »"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be animation"
                    },
                    "width": {
                        "type": "integer",
                        "description": "Optional. Animation width"
                    }
                },
                "description": "Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.\n"
            },
            "InputMediaAudio": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Optional. Duration of the audio in seconds"
                    },
                    "media": {
                        "type": "string",
                        "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More information on Sending Files »"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the audio caption. See formatting options for more details."
                    },
                    "performer": {
                        "type": "string",
                        "description": "Optional. Performer of the audio"
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile_attach_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile_attach_name\u003e. More information on Sending Files »"
                    },
                    "title": {
                        "type": "string",
                        "description": "Optional. Title of the audio"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be audio"
                    }
                },
                "description": "Represents an audio file to be treated as music to be sent.\n"
            },
            "InputMediaDocument": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the document to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "disable_content_type_detection": {
                        "type": "boolean",
                        "description": "Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album."
                    },
                    "media": {
                        "type": "string",
                        "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More information on Sending Files »"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the document caption. See formatting options for more details."
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile_attach_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile_attach_name\u003e. More information on Sending Files »"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be document"
                    }
                },
                "description": "Represents a general file to be sent.\n"
            },
            "InputMediaPhoto": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "has_spoiler": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the photo needs to be covered with a spoiler animation"
                    },
                    "media": {
                        "type": "string",
                        "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More information on Sending Files »"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the photo caption. See formatting options for more details."
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be photo"
                    }
                },
                "description": "Represents a photo to be sent.\n"
            },
            "InputMediaVideo": {
                "type": "object",
                "properties": {
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption of the video to be sent, 0-1024 characters after entities parsing"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode"
                    },
                    "cover": {
                        "type": "string",
                        "description": "Optional. Cover for the video in the message. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More information on Sending Files »"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Optional. Video duration in seconds"
                    },
                    "has_spoiler": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the video needs to be covered with a spoiler animation"
                    },
                    "height": {
                        "type": "integer",
                        "description": "Optional. Video height"
                    },
                    "media": {
                        "type": "string",
                        "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More information on Sending Files »"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the video caption. See formatting options for more details."
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. Pass True, if the caption must be shown above the message media"
                    },
                    "start_timestamp": {
                        "type": "integer",
                        "description": "Optional. Start timestamp for the video in the message"
                    },
                    "supports_streaming": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the uploaded video is suitable for streaming"
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile_attach_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile_attach_name\u003e. More information on Sending Files »"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the result, must be video"
                    },
                    "width": {
                        "type": "integer",
                        "description": "Optional. Video width"
                    }
                },
                "description": "Represents a video to be sent.\n"
            },
            "InputMessageContent": {
                "type": "object",
                "description": "This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types:\n- InputTextMessageContent\n- InputLocationMessageContent\n- InputVenueMessageContent\n- InputContactMessageContent\n- InputInvoiceMessageContent\n"
            },
            "InputPaidMedia": {
                "type": "object",
                "description": "This object describes the paid media to be sent. Currently, it can be one of\n- InputPaidMediaPhoto\n- InputPaidMediaVideo\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/InputPaidMediaPhoto"
                    },
                    {
                        "$ref": "#/components/schemas/InputPaidMediaVideo"
                    }
                ]
            },
            "InputPaidMediaPhoto": {
                "type": "object",
                "properties": {
                    "media": {
                        "type": "string",
                        "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More information on Sending Files »"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the media, must be photo"
                    }
                },
                "description": "The paid media to send is a photo.\n"
            },
            "InputPaidMediaVideo": {
                "type": "object",
                "properties": {
                    "cover": {
                        "type": "string",
                        "description": "Optional. Cover for the video in the message. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More information on Sending Files »"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Optional. Video duration in seconds"
                    },
                    "height": {
                        "type": "integer",
                        "description": "Optional. Video height"
                    },
                    "media": {
                        "type": "string",
                        "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More information on Sending Files »"
                    },
                    "start_timestamp": {
                        "type": "integer",
                        "description": "Optional. Start timestamp for the video in the message"
                    },
                    "supports_streaming": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the uploaded video is suitable for streaming"
                    },
                    "thumbnail": {
                        "type": "string",
                        "description": "Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile_attach_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile_attach_name\u003e. More information on Sending Files »"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the media, must be video"
                    },
                    "width": {
                        "type": "integer",
                        "description": "Optional. Video width"
                    }
                },
                "description": "The paid media to send is a video.\n"
            },
            "InputPollOption": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Option text, 1-100 characters"
                    },
                    "text_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of text_parse_mode"
                    },
                    "text_parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed"
                    }
                },
                "description": "This object contains information about one answer option in a poll to be sent.\n"
            },
            "InputProfilePhoto": {
                "type": "object",
                "description": "This object describes a profile photo to set. Currently, it can be one of\n- InputProfilePhotoStatic\n- InputProfilePhotoAnimated\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/InputProfilePhotoStatic"
                    },
                    {
                        "$ref": "#/components/schemas/InputProfilePhotoAnimated"
                    }
                ]
            },
            "InputProfilePhotoAnimated": {
                "type": "object",
                "properties": {
                    "animation": {
                        "type": "string",
                        "description": "The animated profile photo. Profile photos can't be reused and can only be uploaded as a new file, so you can pass “attach://\u003cfile_attach_name\u003e” if the photo was uploaded using multipart/form-data under \u003cfile_attach_name\u003e. More information on Sending Files »"
                    },
                    "main_frame_timestamp": {
                        "type": "number",
                        "description": "Optional. Timestamp in seconds of the frame that will be used as the static profile photo. Defaults to 0.0."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the profile photo, must be animated"
                    }
                },
                "description": "An animated profile photo in the MPEG4 format.\n"
            },
            "InputProfilePhotoStatic": {
                "type": "object",
                "properties": {
                    "photo": {
                        "type": "string",
                        "description": "The static profile photo. Profile photos can't be reused and can only be uploaded as a new file, so you can pass “attach://\u003cfile_attach_name\u003e” if the photo was uploaded using multipart/form-data under \u003cfile_attach_name\u003e. More information on Sending Files »"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the profile photo, must be static"
                    }
                },
                "description": "A static profile photo in the .JPG format.\n"
            },
            "InputSticker": {
                "type": "object",
                "properties": {
                    "emoji_list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of 1-20 emoji associated with the sticker"
                    },
                    "format": {
                        "type": "string",
                        "description": "Format of the added sticker, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, “video” for a .WEBM video"
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Optional. List of 0-20 search keywords for the sticker with total length of up to 64 characters. For “regular” and “custom_emoji” stickers only."
                    },
                    "mask_position": {
                        "$ref": "#/components/schemas/MaskPosition",
                        "description": "Optional. Position where the mask should be placed on faces. For “mask” stickers only."
                    },
                    "sticker": {
                        "type": "string",
                        "description": "The added sticker. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new file using multipart/form-data under \u003cfile_attach_name\u003e name. Animated and video stickers can't be uploaded via HTTP URL. More information on Sending Files »"
                    }
                },
                "description": "This object describes a sticker to be added to a sticker set.\n"
            },
            "InputStoryContent": {
                "type": "object",
                "description": "This object describes the content of a story to post. Currently, it can be one of\n- InputStoryContentPhoto\n- InputStoryContentVideo\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/InputStoryContentPhoto"
                    },
                    {
                        "$ref": "#/components/schemas/InputStoryContentVideo"
                    }
                ]
            },
            "InputStoryContentPhoto": {
                "type": "object",
                "properties": {
                    "photo": {
                        "type": "string",
                        "description": "The photo to post as a story. The photo must be of the size 1080x1920 and must not exceed 10 MB. The photo can't be reused and can only be uploaded as a new file, so you can pass “attach://\u003cfile_attach_name\u003e” if the photo was uploaded using multipart/form-data under \u003cfile_attach_name\u003e. More information on Sending Files »"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the content, must be photo"
                    }
                },
                "description": "Describes a photo to post as a story.\n"
            },
            "InputStoryContentVideo": {
                "type": "object",
                "properties": {
                    "cover_frame_timestamp": {
                        "type": "number",
                        "description": "Optional. Timestamp in seconds of the frame that will be used as the static cover for the story. Defaults to 0.0."
                    },
                    "duration": {
                        "type": "number",
                        "description": "Optional. Precise duration of the video in seconds; 0-60"
                    },
                    "is_animation": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the video has no sound"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the content, must be video"
                    },
                    "video": {
                        "type": "string",
                        "description": "The video to post as a story. The video must be of the size 720x1280, streamable, encoded with H.265 codec, with key frames added each second in the MPEG4 format, and must not exceed 30 MB. The video can't be reused and can only be uploaded as a new file, so you can pass “attach://\u003cfile_attach_name\u003e” if the video was uploaded using multipart/form-data under \u003cfile_attach_name\u003e. More information on Sending Files »"
                    }
                },
                "description": "Describes a video to post as a story.\n"
            },
            "InputTextMessageContent": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. List of special entities that appear in message text, which can be specified instead of parse_mode"
                    },
                    "link_preview_options": {
                        "$ref": "#/components/schemas/LinkPreviewOptions",
                        "description": "Optional. Link preview generation options for the message"
                    },
                    "message_text": {
                        "type": "string",
                        "description": "Text of the message to be sent, 1-4096 characters"
                    },
                    "parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the message text. See formatting options for more details."
                    }
                },
                "description": "Represents the content of a text message to be sent as the result of an inline query.\n"
            },
            "InputVenueMessageContent": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Address of the venue"
                    },
                    "foursquare_id": {
                        "type": "string",
                        "description": "Optional. Foursquare identifier of the venue, if known"
                    },
                    "foursquare_type": {
                        "type": "string",
                        "description": "Optional. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)"
                    },
                    "google_place_id": {
                        "type": "string",
                        "description": "Optional. Google Places identifier of the venue"
                    },
                    "google_place_type": {
                        "type": "string",
                        "description": "Optional. Google Places type of the venue. (See supported types.)"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude of the venue in degrees"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude of the venue in degrees"
                    },
                    "title": {
                        "type": "string",
                        "description": "Name of the venue"
                    }
                },
                "description": "Represents the content of a venue message to be sent as the result of an inline query.\n"
            },
            "Invoice": {
                "type": "object",
                "properties": {
                    "currency": {
                        "type": "string",
                        "description": "Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars"
                    },
                    "description": {
                        "type": "string",
                        "description": "Product description"
                    },
                    "start_parameter": {
                        "type": "string",
                        "description": "Unique bot deep-linking parameter that can be used to generate this invoice"
                    },
                    "title": {
                        "type": "string",
                        "description": "Product name"
                    },
                    "total_amount": {
                        "type": "integer",
                        "description": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
                    }
                },
                "description": "This object contains basic information about an invoice.\n"
            },
            "KeyboardButton": {
                "type": "object",
                "properties": {
                    "request_chat": {
                        "$ref": "#/components/schemas/KeyboardButtonRequestChat",
                        "description": "Optional. If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a “chat_shared” service message. Available in private chats only."
                    },
                    "request_contact": {
                        "type": "boolean",
                        "description": "Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only."
                    },
                    "request_location": {
                        "type": "boolean",
                        "description": "Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only."
                    },
                    "request_poll": {
                        "$ref": "#/components/schemas/KeyboardButtonPollType",
                        "description": "Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only."
                    },
                    "request_users": {
                        "$ref": "#/components/schemas/KeyboardButtonRequestUsers",
                        "description": "Optional. If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a “users_shared” service message. Available in private chats only."
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed"
                    },
                    "web_app": {
                        "$ref": "#/components/schemas/WebAppInfo",
                        "description": "Optional. If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a “web_app_data” service message. Available in private chats only."
                    }
                },
                "description": "This object represents one button of the reply keyboard. At most one of the optional fields must be used to specify type of the button. For simple text buttons, String can be used instead of this object to specify the button text.\n"
            },
            "KeyboardButtonPollType": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type."
                    }
                },
                "description": "This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.\n"
            },
            "KeyboardButtonRequestChat": {
                "type": "object",
                "properties": {
                    "bot_administrator_rights": {
                        "$ref": "#/components/schemas/ChatAdministratorRights",
                        "description": "Optional. A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of user_administrator_rights. If not specified, no additional restrictions are applied."
                    },
                    "bot_is_member": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied."
                    },
                    "chat_has_username": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied."
                    },
                    "chat_is_channel": {
                        "type": "boolean",
                        "description": "Pass True to request a channel chat, pass False to request a group or a supergroup chat."
                    },
                    "chat_is_created": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied."
                    },
                    "chat_is_forum": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied."
                    },
                    "request_id": {
                        "type": "integer",
                        "description": "Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message"
                    },
                    "request_photo": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request the chat's photo"
                    },
                    "request_title": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request the chat's title"
                    },
                    "request_username": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request the chat's username"
                    },
                    "user_administrator_rights": {
                        "$ref": "#/components/schemas/ChatAdministratorRights",
                        "description": "Optional. A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of bot_administrator_rights. If not specified, no additional restrictions are applied."
                    }
                },
                "description": "This object defines the criteria used to request a suitable chat. Information about the selected chat will be shared with the bot when the corresponding button is pressed. The bot will be granted requested rights in the chat if appropriate. More about requesting chats ».\n"
            },
            "KeyboardButtonRequestUsers": {
                "type": "object",
                "properties": {
                    "max_quantity": {
                        "type": "integer",
                        "description": "Optional. The maximum number of users to be selected; 1-10. Defaults to 1."
                    },
                    "request_id": {
                        "type": "integer",
                        "description": "Signed 32-bit identifier of the request that will be received back in the UsersShared object. Must be unique within the message"
                    },
                    "request_name": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request the users' first and last names"
                    },
                    "request_photo": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request the users' photos"
                    },
                    "request_username": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request the users' usernames"
                    },
                    "user_is_bot": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request bots, pass False to request regular users. If not specified, no additional restrictions are applied."
                    },
                    "user_is_premium": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request premium users, pass False to request non-premium users. If not specified, no additional restrictions are applied."
                    }
                },
                "description": "This object defines the criteria used to request suitable users. Information about the selected users will be shared with the bot when the corresponding button is pressed. More about requesting users »\n"
            },
            "LabeledPrice": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
                    },
                    "label": {
                        "type": "string",
                        "description": "Portion label"
                    }
                },
                "description": "This object represents a portion of the price for goods or services.\n"
            },
            "LinkPreviewOptions": {
                "type": "object",
                "properties": {
                    "is_disabled": {
                        "type": "boolean",
                        "description": "Optional. True, if the link preview is disabled"
                    },
                    "prefer_large_media": {
                        "type": "boolean",
                        "description": "Optional. True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview"
                    },
                    "prefer_small_media": {
                        "type": "boolean",
                        "description": "Optional. True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview"
                    },
                    "show_above_text": {
                        "type": "boolean",
                        "description": "Optional. True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text"
                    },
                    "url": {
                        "type": "string",
                        "description": "Optional. URL to use for the link preview. If empty, then the first URL found in the message text will be used"
                    }
                },
                "description": "Describes the options used for link preview generation.\n"
            },
            "Location": {
                "type": "object",
                "properties": {
                    "heading": {
                        "type": "integer",
                        "description": "Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only."
                    },
                    "horizontal_accuracy": {
                        "type": "number",
                        "description": "Optional. The radius of uncertainty for the location, measured in meters; 0-1500"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude as defined by the sender"
                    },
                    "live_period": {
                        "type": "integer",
                        "description": "Optional. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only."
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude as defined by the sender"
                    },
                    "proximity_alert_radius": {
                        "type": "integer",
                        "description": "Optional. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only."
                    }
                },
                "description": "This object represents a point on the map.\n"
            },
            "LocationAddress": {
                "type": "object",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "Optional. City of the location"
                    },
                    "country_code": {
                        "type": "string",
                        "description": "The two-letter ISO 3166-1 alpha-2 country code of the country where the location is located"
                    },
                    "state": {
                        "type": "string",
                        "description": "Optional. State of the location"
                    },
                    "street": {
                        "type": "string",
                        "description": "Optional. Street address of the location"
                    }
                },
                "description": "Describes the physical address of a location.\n"
            },
            "LoginUrl": {
                "type": "object",
                "properties": {
                    "bot_username": {
                        "type": "string",
                        "description": "Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details."
                    },
                    "forward_text": {
                        "type": "string",
                        "description": "Optional. New text of the button in forwarded messages."
                    },
                    "request_write_access": {
                        "type": "boolean",
                        "description": "Optional. Pass True to request the permission for your bot to send messages to the user."
                    },
                    "url": {
                        "type": "string",
                        "description": "An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization."
                    }
                },
                "description": "This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:\nTelegram apps support these buttons as of version 5.7.\n"
            },
            "MaskPosition": {
                "type": "object",
                "properties": {
                    "point": {
                        "type": "string",
                        "description": "The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”."
                    },
                    "scale": {
                        "type": "number",
                        "description": "Mask scaling coefficient. For example, 2.0 means double size."
                    },
                    "x_shift": {
                        "type": "number",
                        "description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position."
                    },
                    "y_shift": {
                        "type": "number",
                        "description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position."
                    }
                },
                "description": "This object describes the position on faces where a mask should be placed by default.\n"
            },
            "MaybeInaccessibleMessage": {
                "type": "object",
                "description": "This object describes a message that can be inaccessible to the bot. It can be one of\n- Message\n- InaccessibleMessage\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Message"
                    },
                    {
                        "$ref": "#/components/schemas/InaccessibleMessage"
                    }
                ]
            },
            "MenuButton": {
                "type": "object",
                "description": "This object describes the bot's menu button in a private chat. It should be one of\n- MenuButtonCommands\n- MenuButtonWebApp\n- MenuButtonDefault\nIf a menu button other than MenuButtonDefault is set for a private chat, then it is applied in the chat. Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands.\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MenuButtonCommands"
                    },
                    {
                        "$ref": "#/components/schemas/MenuButtonWebApp"
                    },
                    {
                        "$ref": "#/components/schemas/MenuButtonDefault"
                    }
                ]
            },
            "MenuButtonCommands": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the button, must be commands"
                    }
                },
                "description": "Represents a menu button, which opens the bot's list of commands.\n"
            },
            "MenuButtonDefault": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the button, must be default"
                    }
                },
                "description": "Describes that no specific value for the menu button was set.\n"
            },
            "MenuButtonWebApp": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Text on the button"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the button, must be web_app"
                    },
                    "web_app": {
                        "$ref": "#/components/schemas/WebAppInfo",
                        "description": "Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Alternatively, a t.me link to a Web App of the bot can be specified in the object instead of the Web App's URL, in which case the Web App will be opened as if the user pressed the link."
                    }
                },
                "description": "Represents a menu button, which launches a Web App.\n"
            },
            "Message": {
                "type": "object",
                "properties": {
                    "animation": {
                        "$ref": "#/components/schemas/Animation",
                        "description": "Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set"
                    },
                    "audio": {
                        "$ref": "#/components/schemas/Audio",
                        "description": "Optional. Message is an audio file, information about the file"
                    },
                    "author_signature": {
                        "type": "string",
                        "description": "Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator"
                    },
                    "boost_added": {
                        "$ref": "#/components/schemas/ChatBoostAdded",
                        "description": "Optional. Service message: user boosted the chat"
                    },
                    "business_connection_id": {
                        "type": "string",
                        "description": "Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier."
                    },
                    "caption": {
                        "type": "string",
                        "description": "Optional. Caption for the animation, audio, document, paid media, photo, video or voice"
                    },
                    "caption_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption"
                    },
                    "channel_chat_created": {
                        "type": "boolean",
                        "description": "Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel."
                    },
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Chat the message belongs to"
                    },
                    "chat_background_set": {
                        "$ref": "#/components/schemas/ChatBackground",
                        "description": "Optional. Service message: chat background set"
                    },
                    "chat_shared": {
                        "$ref": "#/components/schemas/ChatShared",
                        "description": "Optional. Service message: a chat was shared with the bot"
                    },
                    "checklist": {
                        "$ref": "#/components/schemas/Checklist",
                        "description": "Optional. Message is a checklist"
                    },
                    "checklist_tasks_added": {
                        "$ref": "#/components/schemas/ChecklistTasksAdded",
                        "description": "Optional. Service message: tasks were added to a checklist"
                    },
                    "checklist_tasks_done": {
                        "$ref": "#/components/schemas/ChecklistTasksDone",
                        "description": "Optional. Service message: some tasks in a checklist were marked as done or not done"
                    },
                    "connected_website": {
                        "type": "string",
                        "description": "Optional. The domain name of the website on which the user has logged in. More about Telegram Login »"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/Contact",
                        "description": "Optional. Message is a shared contact, information about the contact"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Date the message was sent in Unix time. It is always a positive number, representing a valid date."
                    },
                    "delete_chat_photo": {
                        "type": "boolean",
                        "description": "Optional. Service message: the chat photo was deleted"
                    },
                    "dice": {
                        "$ref": "#/components/schemas/Dice",
                        "description": "Optional. Message is a dice with random value"
                    },
                    "direct_message_price_changed": {
                        "$ref": "#/components/schemas/DirectMessagePriceChanged",
                        "description": "Optional. Service message: the price for paid messages in the corresponding direct messages chat of a channel has changed"
                    },
                    "document": {
                        "$ref": "#/components/schemas/Document",
                        "description": "Optional. Message is a general file, information about the file"
                    },
                    "edit_date": {
                        "type": "integer",
                        "description": "Optional. Date the message was last edited in Unix time"
                    },
                    "effect_id": {
                        "type": "string",
                        "description": "Optional. Unique identifier of the message effect added to the message"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text"
                    },
                    "external_reply": {
                        "$ref": "#/components/schemas/ExternalReplyInfo",
                        "description": "Optional. Information about the message that is being replied to, which may come from another chat or forum topic"
                    },
                    "forum_topic_closed": {
                        "$ref": "#/components/schemas/ForumTopicClosed",
                        "description": "Optional. Service message: forum topic closed"
                    },
                    "forum_topic_created": {
                        "$ref": "#/components/schemas/ForumTopicCreated",
                        "description": "Optional. Service message: forum topic created"
                    },
                    "forum_topic_edited": {
                        "$ref": "#/components/schemas/ForumTopicEdited",
                        "description": "Optional. Service message: forum topic edited"
                    },
                    "forum_topic_reopened": {
                        "$ref": "#/components/schemas/ForumTopicReopened",
                        "description": "Optional. Service message: forum topic reopened"
                    },
                    "forward_origin": {
                        "$ref": "#/components/schemas/MessageOrigin",
                        "description": "Optional. Information about the original message for forwarded messages"
                    },
                    "from": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. Sender of the message; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats"
                    },
                    "game": {
                        "$ref": "#/components/schemas/Game",
                        "description": "Optional. Message is a game, information about the game. More about games »"
                    },
                    "general_forum_topic_hidden": {
                        "$ref": "#/components/schemas/GeneralForumTopicHidden",
                        "description": "Optional. Service message: the 'General' forum topic hidden"
                    },
                    "general_forum_topic_unhidden": {
                        "$ref": "#/components/schemas/GeneralForumTopicUnhidden",
                        "description": "Optional. Service message: the 'General' forum topic unhidden"
                    },
                    "gift": {
                        "$ref": "#/components/schemas/GiftInfo",
                        "description": "Optional. Service message: a regular gift was sent or received"
                    },
                    "giveaway": {
                        "$ref": "#/components/schemas/Giveaway",
                        "description": "Optional. The message is a scheduled giveaway message"
                    },
                    "giveaway_completed": {
                        "$ref": "#/components/schemas/GiveawayCompleted",
                        "description": "Optional. Service message: a giveaway without public winners was completed"
                    },
                    "giveaway_created": {
                        "$ref": "#/components/schemas/GiveawayCreated",
                        "description": "Optional. Service message: a scheduled giveaway was created"
                    },
                    "giveaway_winners": {
                        "$ref": "#/components/schemas/GiveawayWinners",
                        "description": "Optional. A giveaway with public winners was completed"
                    },
                    "group_chat_created": {
                        "type": "boolean",
                        "description": "Optional. Service message: the group has been created"
                    },
                    "has_media_spoiler": {
                        "type": "boolean",
                        "description": "Optional. True, if the message media is covered by a spoiler animation"
                    },
                    "has_protected_content": {
                        "type": "boolean",
                        "description": "Optional. True, if the message can't be forwarded"
                    },
                    "invoice": {
                        "$ref": "#/components/schemas/Invoice",
                        "description": "Optional. Message is an invoice for a payment, information about the invoice. More about payments »"
                    },
                    "is_automatic_forward": {
                        "type": "boolean",
                        "description": "Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group"
                    },
                    "is_from_offline": {
                        "type": "boolean",
                        "description": "Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message"
                    },
                    "is_topic_message": {
                        "type": "boolean",
                        "description": "Optional. True, if the message is sent to a forum topic"
                    },
                    "left_chat_member": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. A member was removed from the group, information about them (this member may be the bot itself)"
                    },
                    "link_preview_options": {
                        "$ref": "#/components/schemas/LinkPreviewOptions",
                        "description": "Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed"
                    },
                    "location": {
                        "$ref": "#/components/schemas/Location",
                        "description": "Optional. Message is a shared location, information about the location"
                    },
                    "media_group_id": {
                        "type": "string",
                        "description": "Optional. The unique identifier of a media message group this message belongs to"
                    },
                    "message_auto_delete_timer_changed": {
                        "$ref": "#/components/schemas/MessageAutoDeleteTimerChanged",
                        "description": "Optional. Service message: auto-delete timer settings changed in the chat"
                    },
                    "message_id": {
                        "type": "integer",
                        "description": "Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent"
                    },
                    "message_thread_id": {
                        "type": "integer",
                        "description": "Optional. Unique identifier of a message thread to which the message belongs; for supergroups only"
                    },
                    "migrate_from_chat_id": {
                        "type": "integer",
                        "description": "Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier."
                    },
                    "migrate_to_chat_id": {
                        "type": "integer",
                        "description": "Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier."
                    },
                    "new_chat_members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "description": "Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)"
                    },
                    "new_chat_photo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhotoSize"
                        },
                        "description": "Optional. A chat photo was change to this value"
                    },
                    "new_chat_title": {
                        "type": "string",
                        "description": "Optional. A chat title was changed to this value"
                    },
                    "paid_media": {
                        "$ref": "#/components/schemas/PaidMediaInfo",
                        "description": "Optional. Message contains paid media; information about the paid media"
                    },
                    "paid_message_price_changed": {
                        "$ref": "#/components/schemas/PaidMessagePriceChanged",
                        "description": "Optional. Service message: the price for paid messages has changed in the chat"
                    },
                    "paid_star_count": {
                        "type": "integer",
                        "description": "Optional. The number of Telegram Stars that were paid by the sender of the message to send it"
                    },
                    "passport_data": {
                        "$ref": "#/components/schemas/PassportData",
                        "description": "Optional. Telegram Passport data"
                    },
                    "photo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhotoSize"
                        },
                        "description": "Optional. Message is a photo, available sizes of the photo"
                    },
                    "pinned_message": {
                        "$ref": "#/components/schemas/MaybeInaccessibleMessage",
                        "description": "Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply."
                    },
                    "poll": {
                        "$ref": "#/components/schemas/Poll",
                        "description": "Optional. Message is a native poll, information about the poll"
                    },
                    "proximity_alert_triggered": {
                        "$ref": "#/components/schemas/ProximityAlertTriggered",
                        "description": "Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location."
                    },
                    "quote": {
                        "$ref": "#/components/schemas/TextQuote",
                        "description": "Optional. For replies that quote part of the original message, the quoted part of the message"
                    },
                    "refunded_payment": {
                        "$ref": "#/components/schemas/RefundedPayment",
                        "description": "Optional. Message is a service message about a refunded payment, information about the payment. More about payments »"
                    },
                    "reply_markup": {
                        "$ref": "#/components/schemas/InlineKeyboardMarkup",
                        "description": "Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons."
                    },
                    "reply_to_message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply."
                    },
                    "reply_to_story": {
                        "$ref": "#/components/schemas/Story",
                        "description": "Optional. For replies to a story, the original story"
                    },
                    "sender_boost_count": {
                        "type": "integer",
                        "description": "Optional. If the sender of the message boosted the chat, the number of boosts added by the user"
                    },
                    "sender_business_bot": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account."
                    },
                    "sender_chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Optional. Sender of the message when sent on behalf of a chat. For example, the supergroup itself for messages sent by its anonymous administrators or a linked channel for messages automatically forwarded to the channel's discussion group. For backward compatibility, if the message was sent on behalf of a chat, the field from contains a fake sender user in non-channel chats."
                    },
                    "show_caption_above_media": {
                        "type": "boolean",
                        "description": "Optional. True, if the caption must be shown above the message media"
                    },
                    "sticker": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "Optional. Message is a sticker, information about the sticker"
                    },
                    "story": {
                        "$ref": "#/components/schemas/Story",
                        "description": "Optional. Message is a forwarded story"
                    },
                    "successful_payment": {
                        "$ref": "#/components/schemas/SuccessfulPayment",
                        "description": "Optional. Message is a service message about a successful payment, information about the payment. More about payments »"
                    },
                    "supergroup_chat_created": {
                        "type": "boolean",
                        "description": "Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup."
                    },
                    "text": {
                        "type": "string",
                        "description": "Optional. For text messages, the actual UTF-8 text of the message"
                    },
                    "unique_gift": {
                        "$ref": "#/components/schemas/UniqueGiftInfo",
                        "description": "Optional. Service message: a unique gift was sent or received"
                    },
                    "users_shared": {
                        "$ref": "#/components/schemas/UsersShared",
                        "description": "Optional. Service message: users were shared with the bot"
                    },
                    "venue": {
                        "$ref": "#/components/schemas/Venue",
                        "description": "Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set"
                    },
                    "via_bot": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. Bot through which the message was sent"
                    },
                    "video": {
                        "$ref": "#/components/schemas/Video",
                        "description": "Optional. Message is a video, information about the video"
                    },
                    "video_chat_ended": {
                        "$ref": "#/components/schemas/VideoChatEnded",
                        "description": "Optional. Service message: video chat ended"
                    },
                    "video_chat_participants_invited": {
                        "$ref": "#/components/schemas/VideoChatParticipantsInvited",
                        "description": "Optional. Service message: new participants invited to a video chat"
                    },
                    "video_chat_scheduled": {
                        "$ref": "#/components/schemas/VideoChatScheduled",
                        "description": "Optional. Service message: video chat scheduled"
                    },
                    "video_chat_started": {
                        "$ref": "#/components/schemas/VideoChatStarted",
                        "description": "Optional. Service message: video chat started"
                    },
                    "video_note": {
                        "$ref": "#/components/schemas/VideoNote",
                        "description": "Optional. Message is a video note, information about the video message"
                    },
                    "voice": {
                        "$ref": "#/components/schemas/Voice",
                        "description": "Optional. Message is a voice message, information about the file"
                    },
                    "web_app_data": {
                        "$ref": "#/components/schemas/WebAppData",
                        "description": "Optional. Service message: data sent by a Web App"
                    },
                    "write_access_allowed": {
                        "$ref": "#/components/schemas/WriteAccessAllowed",
                        "description": "Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess"
                    }
                },
                "description": "This object represents a message.\n"
            },
            "MessageAutoDeleteTimerChanged": {
                "type": "object",
                "properties": {
                    "message_auto_delete_time": {
                        "type": "integer",
                        "description": "New auto-delete time for messages in the chat; in seconds"
                    }
                },
                "description": "This object represents a service message about a change in auto-delete timer settings.\n"
            },
            "MessageEntity": {
                "type": "object",
                "properties": {
                    "custom_emoji_id": {
                        "type": "string",
                        "description": "Optional. For “custom_emoji” only, unique identifier of the custom emoji. Use getCustomEmojiStickers to get full information about the sticker"
                    },
                    "language": {
                        "type": "string",
                        "description": "Optional. For “pre” only, the programming language of the entity text"
                    },
                    "length": {
                        "type": "integer",
                        "description": "Length of the entity in UTF-16 code units"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "Offset in UTF-16 code units to the start of the entity"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entity. Currently, can be “mention” (@username), “hashtag” (#hashtag or #hashtag@chatusername), “cashtag” ($USD or $USD@chatusername), “bot_command” (/start@jobs_bot), “url” (https://telegram.org), “email” (do-not-reply@telegram.org), “phone_number” (+1-212-555-0123), “bold” (bold text), “italic” (italic text), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler” (spoiler message), “blockquote” (block quotation), “expandable_blockquote” (collapsed-by-default block quotation), “code” (monowidth string), “pre” (monowidth block), “text_link” (for clickable text URLs), “text_mention” (for users without usernames), “custom_emoji” (for inline custom emoji stickers)"
                    },
                    "url": {
                        "type": "string",
                        "description": "Optional. For “text_link” only, URL that will be opened after user taps on the text"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. For “text_mention” only, the mentioned user"
                    }
                },
                "description": "This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.\n"
            },
            "MessageId": {
                "type": "object",
                "properties": {
                    "message_id": {
                        "type": "integer",
                        "description": "Unique message identifier. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent"
                    }
                },
                "description": "This object represents a unique message identifier.\n"
            },
            "MessageOrigin": {
                "type": "object",
                "description": "This object describes the origin of a message. It can be one of\n- MessageOriginUser\n- MessageOriginHiddenUser\n- MessageOriginChat\n- MessageOriginChannel\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/MessageOriginUser"
                    },
                    {
                        "$ref": "#/components/schemas/MessageOriginHiddenUser"
                    },
                    {
                        "$ref": "#/components/schemas/MessageOriginChat"
                    },
                    {
                        "$ref": "#/components/schemas/MessageOriginChannel"
                    }
                ]
            },
            "MessageOriginChannel": {
                "type": "object",
                "properties": {
                    "author_signature": {
                        "type": "string",
                        "description": "Optional. Signature of the original post author"
                    },
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Channel chat to which the message was originally sent"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Date the message was sent originally in Unix time"
                    },
                    "message_id": {
                        "type": "integer",
                        "description": "Unique message identifier inside the chat"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the message origin, always “channel”"
                    }
                },
                "description": "The message was originally sent to a channel chat.\n"
            },
            "MessageOriginChat": {
                "type": "object",
                "properties": {
                    "author_signature": {
                        "type": "string",
                        "description": "Optional. For messages originally sent by an anonymous chat administrator, original message author signature"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Date the message was sent originally in Unix time"
                    },
                    "sender_chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Chat that sent the message originally"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the message origin, always “chat”"
                    }
                },
                "description": "The message was originally sent on behalf of a chat to a group chat.\n"
            },
            "MessageOriginHiddenUser": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "integer",
                        "description": "Date the message was sent originally in Unix time"
                    },
                    "sender_user_name": {
                        "type": "string",
                        "description": "Name of the user that sent the message originally"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the message origin, always “hidden_user”"
                    }
                },
                "description": "The message was originally sent by an unknown user.\n"
            },
            "MessageOriginUser": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "integer",
                        "description": "Date the message was sent originally in Unix time"
                    },
                    "sender_user": {
                        "$ref": "#/components/schemas/User",
                        "description": "User that sent the message originally"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the message origin, always “user”"
                    }
                },
                "description": "The message was originally sent by a known user.\n"
            },
            "MessageReactionCountUpdated": {
                "type": "object",
                "properties": {
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "The chat containing the message"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Date of the change in Unix time"
                    },
                    "message_id": {
                        "type": "integer",
                        "description": "Unique message identifier inside the chat"
                    },
                    "reactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReactionCount"
                        },
                        "description": "List of reactions that are present on the message"
                    }
                },
                "description": "This object represents reaction changes on a message with anonymous reactions.\n"
            },
            "MessageReactionUpdated": {
                "type": "object",
                "properties": {
                    "actor_chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Optional. The chat on behalf of which the reaction was changed, if the user is anonymous"
                    },
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "The chat containing the message the user reacted to"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Date of the change in Unix time"
                    },
                    "message_id": {
                        "type": "integer",
                        "description": "Unique identifier of the message inside the chat"
                    },
                    "new_reaction": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReactionType"
                        },
                        "description": "New list of reaction types that have been set by the user"
                    },
                    "old_reaction": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReactionType"
                        },
                        "description": "Previous list of reaction types that were set by the user"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. The user that changed the reaction, if the user isn't anonymous"
                    }
                },
                "description": "This object represents a change of a reaction on a message performed by a user.\n"
            },
            "OrderInfo": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Optional. User email"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional. User name"
                    },
                    "phone_number": {
                        "type": "string",
                        "description": "Optional. User's phone number"
                    },
                    "shipping_address": {
                        "$ref": "#/components/schemas/ShippingAddress",
                        "description": "Optional. User shipping address"
                    }
                },
                "description": "This object represents information about an order.\n"
            },
            "OwnedGift": {
                "type": "object",
                "description": "This object describes a gift received and owned by a user or a chat. Currently, it can be one of\n- OwnedGiftRegular\n- OwnedGiftUnique\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/OwnedGiftRegular"
                    },
                    {
                        "$ref": "#/components/schemas/OwnedGiftUnique"
                    }
                ]
            },
            "OwnedGiftRegular": {
                "type": "object",
                "properties": {
                    "can_be_upgraded": {
                        "type": "boolean",
                        "description": "Optional. True, if the gift can be upgraded to a unique gift; for gifts received on behalf of business accounts only"
                    },
                    "convert_star_count": {
                        "type": "integer",
                        "description": "Optional. Number of Telegram Stars that can be claimed by the receiver instead of the gift; omitted if the gift cannot be converted to Telegram Stars"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. Special entities that appear in the text"
                    },
                    "gift": {
                        "$ref": "#/components/schemas/Gift",
                        "description": "Information about the regular gift"
                    },
                    "is_private": {
                        "type": "boolean",
                        "description": "Optional. True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them"
                    },
                    "is_saved": {
                        "type": "boolean",
                        "description": "Optional. True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only"
                    },
                    "owned_gift_id": {
                        "type": "string",
                        "description": "Optional. Unique identifier of the gift for the bot; for gifts received on behalf of business accounts only"
                    },
                    "prepaid_upgrade_star_count": {
                        "type": "integer",
                        "description": "Optional. Number of Telegram Stars that were paid by the sender for the ability to upgrade the gift"
                    },
                    "send_date": {
                        "type": "integer",
                        "description": "Date the gift was sent in Unix time"
                    },
                    "sender_user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. Sender of the gift if it is a known user"
                    },
                    "text": {
                        "type": "string",
                        "description": "Optional. Text of the message that was added to the gift"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the gift, always “regular”"
                    },
                    "was_refunded": {
                        "type": "boolean",
                        "description": "Optional. True, if the gift was refunded and isn't available anymore"
                    }
                },
                "description": "Describes a regular gift owned by a user or a chat.\n"
            },
            "OwnedGiftUnique": {
                "type": "object",
                "properties": {
                    "can_be_transferred": {
                        "type": "boolean",
                        "description": "Optional. True, if the gift can be transferred to another owner; for gifts received on behalf of business accounts only"
                    },
                    "gift": {
                        "$ref": "#/components/schemas/UniqueGift",
                        "description": "Information about the unique gift"
                    },
                    "is_saved": {
                        "type": "boolean",
                        "description": "Optional. True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only"
                    },
                    "next_transfer_date": {
                        "type": "integer",
                        "description": "Optional. Point in time (Unix timestamp) when the gift can be transferred. If it is in the past, then the gift can be transferred now"
                    },
                    "owned_gift_id": {
                        "type": "string",
                        "description": "Optional. Unique identifier of the received gift for the bot; for gifts received on behalf of business accounts only"
                    },
                    "send_date": {
                        "type": "integer",
                        "description": "Date the gift was sent in Unix time"
                    },
                    "sender_user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. Sender of the gift if it is a known user"
                    },
                    "transfer_star_count": {
                        "type": "integer",
                        "description": "Optional. Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the gift, always “unique”"
                    }
                },
                "description": "Describes a unique gift received and owned by a user or a chat.\n"
            },
            "OwnedGifts": {
                "type": "object",
                "properties": {
                    "gifts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OwnedGift"
                        },
                        "description": "The list of gifts"
                    },
                    "next_offset": {
                        "type": "string",
                        "description": "Optional. Offset for the next request. If empty, then there are no more results"
                    },
                    "total_count": {
                        "type": "integer",
                        "description": "The total number of gifts owned by the user or the chat"
                    }
                },
                "description": "Contains the list of gifts received and owned by a user or a chat.\n"
            },
            "PaidMedia": {
                "type": "object",
                "description": "This object describes paid media. Currently, it can be one of\n- PaidMediaPreview\n- PaidMediaPhoto\n- PaidMediaVideo\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PaidMediaPreview"
                    },
                    {
                        "$ref": "#/components/schemas/PaidMediaPhoto"
                    },
                    {
                        "$ref": "#/components/schemas/PaidMediaVideo"
                    }
                ]
            },
            "PaidMediaInfo": {
                "type": "object",
                "properties": {
                    "paid_media": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaidMedia"
                        },
                        "description": "Information about the paid media"
                    },
                    "star_count": {
                        "type": "integer",
                        "description": "The number of Telegram Stars that must be paid to buy access to the media"
                    }
                },
                "description": "Describes the paid media added to a message.\n"
            },
            "PaidMediaPhoto": {
                "type": "object",
                "properties": {
                    "photo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhotoSize"
                        },
                        "description": "The photo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the paid media, always “photo”"
                    }
                },
                "description": "The paid media is a photo.\n"
            },
            "PaidMediaPreview": {
                "type": "object",
                "properties": {
                    "duration": {
                        "type": "integer",
                        "description": "Optional. Duration of the media in seconds as defined by the sender"
                    },
                    "height": {
                        "type": "integer",
                        "description": "Optional. Media height as defined by the sender"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the paid media, always “preview”"
                    },
                    "width": {
                        "type": "integer",
                        "description": "Optional. Media width as defined by the sender"
                    }
                },
                "description": "The paid media isn't available before the payment.\n"
            },
            "PaidMediaPurchased": {
                "type": "object",
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/User",
                        "description": "User who purchased the media"
                    },
                    "paid_media_payload": {
                        "type": "string",
                        "description": "Bot-specified paid media payload"
                    }
                },
                "description": "This object contains information about a paid media purchase.\n"
            },
            "PaidMediaVideo": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the paid media, always “video”"
                    },
                    "video": {
                        "$ref": "#/components/schemas/Video",
                        "description": "The video"
                    }
                },
                "description": "The paid media is a video.\n"
            },
            "PaidMessagePriceChanged": {
                "type": "object",
                "properties": {
                    "paid_message_star_count": {
                        "type": "integer",
                        "description": "The new number of Telegram Stars that must be paid by non-administrator users of the supergroup chat for each sent message"
                    }
                },
                "description": "Describes a service message about a change in the price of paid messages within a chat.\n"
            },
            "PassportData": {
                "type": "object",
                "properties": {
                    "credentials": {
                        "$ref": "#/components/schemas/EncryptedCredentials",
                        "description": "Encrypted credentials required to decrypt the data"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EncryptedPassportElement"
                        },
                        "description": "Array with information about documents and other Telegram Passport elements that was shared with the bot"
                    }
                },
                "description": "Describes Telegram Passport data shared with the bot by the user.\n"
            },
            "PassportElementError": {
                "type": "object",
                "description": "This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:\n- PassportElementErrorDataField\n- PassportElementErrorFrontSide\n- PassportElementErrorReverseSide\n- PassportElementErrorSelfie\n- PassportElementErrorFile\n- PassportElementErrorFiles\n- PassportElementErrorTranslationFile\n- PassportElementErrorTranslationFiles\n- PassportElementErrorUnspecified\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PassportElementErrorDataField"
                    },
                    {
                        "$ref": "#/components/schemas/PassportElementErrorFrontSide"
                    },
                    {
                        "$ref": "#/components/schemas/PassportElementErrorReverseSide"
                    },
                    {
                        "$ref": "#/components/schemas/PassportElementErrorSelfie"
                    },
                    {
                        "$ref": "#/components/schemas/PassportElementErrorFile"
                    },
                    {
                        "$ref": "#/components/schemas/PassportElementErrorFiles"
                    },
                    {
                        "$ref": "#/components/schemas/PassportElementErrorTranslationFile"
                    },
                    {
                        "$ref": "#/components/schemas/PassportElementErrorTranslationFiles"
                    },
                    {
                        "$ref": "#/components/schemas/PassportElementErrorUnspecified"
                    }
                ]
            },
            "PassportElementErrorDataField": {
                "type": "object",
                "properties": {
                    "data_hash": {
                        "type": "string",
                        "description": "Base64-encoded data hash"
                    },
                    "field_name": {
                        "type": "string",
                        "description": "Name of the data field which has the error"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "source": {
                        "type": "string",
                        "description": "Error source, must be data"
                    },
                    "type": {
                        "type": "string",
                        "description": "The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”"
                    }
                },
                "description": "Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.\n"
            },
            "PassportElementErrorFile": {
                "type": "object",
                "properties": {
                    "file_hash": {
                        "type": "string",
                        "description": "Base64-encoded file hash"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "source": {
                        "type": "string",
                        "description": "Error source, must be file"
                    },
                    "type": {
                        "type": "string",
                        "description": "The section of the user's Telegram Passport which has the issue, one of “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”"
                    }
                },
                "description": "Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.\n"
            },
            "PassportElementErrorFiles": {
                "type": "object",
                "properties": {
                    "file_hashes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of base64-encoded file hashes"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "source": {
                        "type": "string",
                        "description": "Error source, must be files"
                    },
                    "type": {
                        "type": "string",
                        "description": "The section of the user's Telegram Passport which has the issue, one of “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”"
                    }
                },
                "description": "Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.\n"
            },
            "PassportElementErrorFrontSide": {
                "type": "object",
                "properties": {
                    "file_hash": {
                        "type": "string",
                        "description": "Base64-encoded hash of the file with the front side of the document"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "source": {
                        "type": "string",
                        "description": "Error source, must be front_side"
                    },
                    "type": {
                        "type": "string",
                        "description": "The section of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”"
                    }
                },
                "description": "Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.\n"
            },
            "PassportElementErrorReverseSide": {
                "type": "object",
                "properties": {
                    "file_hash": {
                        "type": "string",
                        "description": "Base64-encoded hash of the file with the reverse side of the document"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "source": {
                        "type": "string",
                        "description": "Error source, must be reverse_side"
                    },
                    "type": {
                        "type": "string",
                        "description": "The section of the user's Telegram Passport which has the issue, one of “driver_license”, “identity_card”"
                    }
                },
                "description": "Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.\n"
            },
            "PassportElementErrorSelfie": {
                "type": "object",
                "properties": {
                    "file_hash": {
                        "type": "string",
                        "description": "Base64-encoded hash of the file with the selfie"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "source": {
                        "type": "string",
                        "description": "Error source, must be selfie"
                    },
                    "type": {
                        "type": "string",
                        "description": "The section of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”"
                    }
                },
                "description": "Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.\n"
            },
            "PassportElementErrorTranslationFile": {
                "type": "object",
                "properties": {
                    "file_hash": {
                        "type": "string",
                        "description": "Base64-encoded file hash"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "source": {
                        "type": "string",
                        "description": "Error source, must be translation_file"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”"
                    }
                },
                "description": "Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.\n"
            },
            "PassportElementErrorTranslationFiles": {
                "type": "object",
                "properties": {
                    "file_hashes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of base64-encoded file hashes"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "source": {
                        "type": "string",
                        "description": "Error source, must be translation_files"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”"
                    }
                },
                "description": "Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.\n"
            },
            "PassportElementErrorUnspecified": {
                "type": "object",
                "properties": {
                    "element_hash": {
                        "type": "string",
                        "description": "Base64-encoded element hash"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message"
                    },
                    "source": {
                        "type": "string",
                        "description": "Error source, must be unspecified"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of element of the user's Telegram Passport which has the issue"
                    }
                },
                "description": "Represents an issue in an unspecified place. The error is considered resolved when new data is added.\n"
            },
            "PassportFile": {
                "type": "object",
                "properties": {
                    "file_date": {
                        "type": "integer",
                        "description": "Unix time when the file was uploaded"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "File size in bytes"
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    }
                },
                "description": "This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.\n"
            },
            "PhotoSize": {
                "type": "object",
                "properties": {
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "Optional. File size in bytes"
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Photo height"
                    },
                    "width": {
                        "type": "integer",
                        "description": "Photo width"
                    }
                },
                "description": "This object represents one size of a photo or a file / sticker thumbnail.\n"
            },
            "Poll": {
                "type": "object",
                "properties": {
                    "allows_multiple_answers": {
                        "type": "boolean",
                        "description": "True, if the poll allows multiple answers"
                    },
                    "close_date": {
                        "type": "integer",
                        "description": "Optional. Point in time (Unix timestamp) when the poll will be automatically closed"
                    },
                    "correct_option_id": {
                        "type": "integer",
                        "description": "Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot."
                    },
                    "explanation": {
                        "type": "string",
                        "description": "Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters"
                    },
                    "explanation_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique poll identifier"
                    },
                    "is_anonymous": {
                        "type": "boolean",
                        "description": "True, if the poll is anonymous"
                    },
                    "is_closed": {
                        "type": "boolean",
                        "description": "True, if the poll is closed"
                    },
                    "open_period": {
                        "type": "integer",
                        "description": "Optional. Amount of time in seconds the poll will be active after creation"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PollOption"
                        },
                        "description": "List of poll options"
                    },
                    "question": {
                        "type": "string",
                        "description": "Poll question, 1-300 characters"
                    },
                    "question_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions"
                    },
                    "total_voter_count": {
                        "type": "integer",
                        "description": "Total number of users that voted in the poll"
                    },
                    "type": {
                        "type": "string",
                        "description": "Poll type, currently can be “regular” or “quiz”"
                    }
                },
                "description": "This object contains information about a poll.\n"
            },
            "PollAnswer": {
                "type": "object",
                "properties": {
                    "option_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "0-based identifiers of chosen answer options. May be empty if the vote was retracted."
                    },
                    "poll_id": {
                        "type": "string",
                        "description": "Unique poll identifier"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. The user that changed the answer to the poll, if the voter isn't anonymous"
                    },
                    "voter_chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Optional. The chat that changed the answer to the poll, if the voter is anonymous"
                    }
                },
                "description": "This object represents an answer of a user in a non-anonymous poll.\n"
            },
            "PollOption": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Option text, 1-100 characters"
                    },
                    "text_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts"
                    },
                    "voter_count": {
                        "type": "integer",
                        "description": "Number of users that voted for this option"
                    }
                },
                "description": "This object contains information about one answer option in a poll.\n"
            },
            "PreCheckoutQuery": {
                "type": "object",
                "properties": {
                    "currency": {
                        "type": "string",
                        "description": "Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars"
                    },
                    "from": {
                        "$ref": "#/components/schemas/User",
                        "description": "User who sent the query"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique query identifier"
                    },
                    "invoice_payload": {
                        "type": "string",
                        "description": "Bot-specified invoice payload"
                    },
                    "order_info": {
                        "$ref": "#/components/schemas/OrderInfo",
                        "description": "Optional. Order information provided by the user"
                    },
                    "shipping_option_id": {
                        "type": "string",
                        "description": "Optional. Identifier of the shipping option chosen by the user"
                    },
                    "total_amount": {
                        "type": "integer",
                        "description": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
                    }
                },
                "description": "This object contains information about an incoming pre-checkout query.\n"
            },
            "PreparedInlineMessage": {
                "type": "object",
                "properties": {
                    "expiration_date": {
                        "type": "integer",
                        "description": "Expiration date of the prepared message, in Unix time. Expired prepared messages can no longer be used"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the prepared message"
                    }
                },
                "description": "Describes an inline message to be sent by a user of a Mini App.\n"
            },
            "ProximityAlertTriggered": {
                "type": "object",
                "properties": {
                    "distance": {
                        "type": "integer",
                        "description": "The distance between the users"
                    },
                    "traveler": {
                        "$ref": "#/components/schemas/User",
                        "description": "User that triggered the alert"
                    },
                    "watcher": {
                        "$ref": "#/components/schemas/User",
                        "description": "User that set the alert"
                    }
                },
                "description": "This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.\n"
            },
            "ReactionCount": {
                "type": "object",
                "properties": {
                    "total_count": {
                        "type": "integer",
                        "description": "Number of times the reaction was added"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ReactionType",
                        "description": "Type of the reaction"
                    }
                },
                "description": "Represents a reaction added to a message along with the number of times it was added.\n"
            },
            "ReactionType": {
                "type": "object",
                "description": "This object describes the type of a reaction. Currently, it can be one of\n- ReactionTypeEmoji\n- ReactionTypeCustomEmoji\n- ReactionTypePaid\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ReactionTypeEmoji"
                    },
                    {
                        "$ref": "#/components/schemas/ReactionTypeCustomEmoji"
                    },
                    {
                        "$ref": "#/components/schemas/ReactionTypePaid"
                    }
                ]
            },
            "ReactionTypeCustomEmoji": {
                "type": "object",
                "properties": {
                    "custom_emoji_id": {
                        "type": "string",
                        "description": "Custom emoji identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the reaction, always “custom_emoji”"
                    }
                },
                "description": "The reaction is based on a custom emoji.\n"
            },
            "ReactionTypeEmoji": {
                "type": "object",
                "properties": {
                    "emoji": {
                        "type": "string",
                        "description": "Reaction emoji. Currently, it can be one of \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\""
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the reaction, always “emoji”"
                    }
                },
                "description": "The reaction is based on an emoji.\n"
            },
            "ReactionTypePaid": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the reaction, always “paid”"
                    }
                },
                "description": "The reaction is paid.\n"
            },
            "RefundedPayment": {
                "type": "object",
                "properties": {
                    "currency": {
                        "type": "string",
                        "description": "Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars. Currently, always “XTR”"
                    },
                    "invoice_payload": {
                        "type": "string",
                        "description": "Bot-specified invoice payload"
                    },
                    "provider_payment_charge_id": {
                        "type": "string",
                        "description": "Optional. Provider payment identifier"
                    },
                    "telegram_payment_charge_id": {
                        "type": "string",
                        "description": "Telegram payment identifier"
                    },
                    "total_amount": {
                        "type": "integer",
                        "description": "Total refunded price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45, total_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
                    }
                },
                "description": "This object contains basic information about a refunded payment.\n"
            },
            "ReplyKeyboardMarkup": {
                "type": "object",
                "properties": {
                    "input_field_placeholder": {
                        "type": "string",
                        "description": "Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters"
                    },
                    "is_persistent": {
                        "type": "boolean",
                        "description": "Optional. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon."
                    },
                    "keyboard": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/KeyboardButton"
                            }
                        },
                        "description": "Array of button rows, each represented by an Array of KeyboardButton objects"
                    },
                    "one_time_keyboard": {
                        "type": "boolean",
                        "description": "Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false."
                    },
                    "resize_keyboard": {
                        "type": "boolean",
                        "description": "Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard."
                    },
                    "selective": {
                        "type": "boolean",
                        "description": "Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard."
                    }
                },
                "description": "This object represents a custom keyboard with reply options (see Introduction to bots for details and examples). Not supported in channels and for messages sent on behalf of a Telegram Business account.\n"
            },
            "ReplyKeyboardRemove": {
                "type": "object",
                "properties": {
                    "remove_keyboard": {
                        "type": "boolean",
                        "description": "Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)"
                    },
                    "selective": {
                        "type": "boolean",
                        "description": "Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet."
                    }
                },
                "description": "Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup). Not supported in channels and for messages sent on behalf of a Telegram Business account.\n"
            },
            "ReplyParameters": {
                "type": "object",
                "properties": {
                    "allow_sending_without_reply": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the message should be sent even if the specified message to be replied to is not found. Always False for replies in another chat or forum topic. Always True for messages sent on behalf of a business account."
                    },
                    "chat_id": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "description": "Optional. If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername). Not supported for messages sent on behalf of a business account."
                    },
                    "message_id": {
                        "type": "integer",
                        "description": "Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified"
                    },
                    "quote": {
                        "type": "string",
                        "description": "Optional. Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities. The message will fail to send if the quote isn't found in the original message."
                    },
                    "quote_entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. A JSON-serialized list of special entities that appear in the quote. It can be specified instead of quote_parse_mode."
                    },
                    "quote_parse_mode": {
                        "type": "string",
                        "description": "Optional. Mode for parsing entities in the quote. See formatting options for more details."
                    },
                    "quote_position": {
                        "type": "integer",
                        "description": "Optional. Position of the quote in the original message in UTF-16 code units"
                    }
                },
                "description": "Describes reply parameters for the message that is being sent.\n"
            },
            "ResponseParameters": {
                "type": "object",
                "properties": {
                    "migrate_to_chat_id": {
                        "type": "integer",
                        "description": "Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier."
                    },
                    "retry_after": {
                        "type": "integer",
                        "description": "Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated"
                    }
                },
                "description": "Describes why a request was unsuccessful.\n"
            },
            "RevenueWithdrawalState": {
                "type": "object",
                "description": "This object describes the state of a revenue withdrawal operation. Currently, it can be one of\n- RevenueWithdrawalStatePending\n- RevenueWithdrawalStateSucceeded\n- RevenueWithdrawalStateFailed\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RevenueWithdrawalStatePending"
                    },
                    {
                        "$ref": "#/components/schemas/RevenueWithdrawalStateSucceeded"
                    },
                    {
                        "$ref": "#/components/schemas/RevenueWithdrawalStateFailed"
                    }
                ]
            },
            "RevenueWithdrawalStateFailed": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the state, always “failed”"
                    }
                },
                "description": "The withdrawal failed and the transaction was refunded.\n"
            },
            "RevenueWithdrawalStatePending": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the state, always “pending”"
                    }
                },
                "description": "The withdrawal is in progress.\n"
            },
            "RevenueWithdrawalStateSucceeded": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "integer",
                        "description": "Date the withdrawal was completed in Unix time"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the state, always “succeeded”"
                    },
                    "url": {
                        "type": "string",
                        "description": "An HTTPS URL that can be used to see transaction details"
                    }
                },
                "description": "The withdrawal succeeded.\n"
            },
            "SentWebAppMessage": {
                "type": "object",
                "properties": {
                    "inline_message_id": {
                        "type": "string",
                        "description": "Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message."
                    }
                },
                "description": "Describes an inline message sent by a Web App on behalf of a user.\n"
            },
            "SharedUser": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "description": "Optional. First name of the user, if the name was requested by the bot"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "Optional. Last name of the user, if the name was requested by the bot"
                    },
                    "photo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhotoSize"
                        },
                        "description": "Optional. Available sizes of the chat photo, if the photo was requested by the bot"
                    },
                    "user_id": {
                        "type": "integer",
                        "description": "Identifier of the shared user. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so 64-bit integers or double-precision float types are safe for storing these identifiers. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means."
                    },
                    "username": {
                        "type": "string",
                        "description": "Optional. Username of the user, if the username was requested by the bot"
                    }
                },
                "description": "This object contains information about a user that was shared with the bot using a KeyboardButtonRequestUsers button.\n"
            },
            "ShippingAddress": {
                "type": "object",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "City"
                    },
                    "country_code": {
                        "type": "string",
                        "description": "Two-letter ISO 3166-1 alpha-2 country code"
                    },
                    "post_code": {
                        "type": "string",
                        "description": "Address post code"
                    },
                    "state": {
                        "type": "string",
                        "description": "State, if applicable"
                    },
                    "street_line1": {
                        "type": "string",
                        "description": "First line for the address"
                    },
                    "street_line2": {
                        "type": "string",
                        "description": "Second line for the address"
                    }
                },
                "description": "This object represents a shipping address.\n"
            },
            "ShippingOption": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Shipping option identifier"
                    },
                    "prices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LabeledPrice"
                        },
                        "description": "List of price portions"
                    },
                    "title": {
                        "type": "string",
                        "description": "Option title"
                    }
                },
                "description": "This object represents one shipping option.\n"
            },
            "ShippingQuery": {
                "type": "object",
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/User",
                        "description": "User who sent the query"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique query identifier"
                    },
                    "invoice_payload": {
                        "type": "string",
                        "description": "Bot-specified invoice payload"
                    },
                    "shipping_address": {
                        "$ref": "#/components/schemas/ShippingAddress",
                        "description": "User specified shipping address"
                    }
                },
                "description": "This object contains information about an incoming shipping query.\n"
            },
            "StarAmount": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Integer amount of Telegram Stars, rounded to 0; can be negative"
                    },
                    "nanostar_amount": {
                        "type": "integer",
                        "description": "Optional. The number of 1/1000000000 shares of Telegram Stars; from -999999999 to 999999999; can be negative if and only if amount is non-positive"
                    }
                },
                "description": "Describes an amount of Telegram Stars.\n"
            },
            "StarTransaction": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "integer",
                        "description": "Integer amount of Telegram Stars transferred by the transaction"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Date the transaction was created in Unix time"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the transaction. Coincides with the identifier of the original transaction for refund transactions. Coincides with SuccessfulPayment.telegram_payment_charge_id for successful incoming payments from users."
                    },
                    "nanostar_amount": {
                        "type": "integer",
                        "description": "Optional. The number of 1/1000000000 shares of Telegram Stars transferred by the transaction; from 0 to 999999999"
                    },
                    "receiver": {
                        "$ref": "#/components/schemas/TransactionPartner",
                        "description": "Optional. Receiver of an outgoing transaction (e.g., a user for a purchase refund, Fragment for a withdrawal). Only for outgoing transactions"
                    },
                    "source": {
                        "$ref": "#/components/schemas/TransactionPartner",
                        "description": "Optional. Source of an incoming transaction (e.g., a user purchasing goods or services, Fragment refunding a failed withdrawal). Only for incoming transactions"
                    }
                },
                "description": "Describes a Telegram Star transaction. Note that if the buyer initiates a chargeback with the payment provider from whom they acquired Stars (e.g., Apple, Google) following this transaction, the refunded Stars will be deducted from the bot's balance. This is outside of Telegram's control.\n"
            },
            "StarTransactions": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StarTransaction"
                        },
                        "description": "The list of transactions"
                    }
                },
                "description": "Contains a list of Telegram Star transactions.\n"
            },
            "Sticker": {
                "type": "object",
                "properties": {
                    "custom_emoji_id": {
                        "type": "string",
                        "description": "Optional. For custom emoji stickers, unique identifier of the custom emoji"
                    },
                    "emoji": {
                        "type": "string",
                        "description": "Optional. Emoji associated with the sticker"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "Optional. File size in bytes"
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Sticker height"
                    },
                    "is_animated": {
                        "type": "boolean",
                        "description": "True, if the sticker is animated"
                    },
                    "is_video": {
                        "type": "boolean",
                        "description": "True, if the sticker is a video sticker"
                    },
                    "mask_position": {
                        "$ref": "#/components/schemas/MaskPosition",
                        "description": "Optional. For mask stickers, the position where the mask should be placed"
                    },
                    "needs_repainting": {
                        "type": "boolean",
                        "description": "Optional. True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places"
                    },
                    "premium_animation": {
                        "$ref": "#/components/schemas/File",
                        "description": "Optional. For premium regular stickers, premium animation for the sticker"
                    },
                    "set_name": {
                        "type": "string",
                        "description": "Optional. Name of the sticker set to which the sticker belongs"
                    },
                    "thumbnail": {
                        "$ref": "#/components/schemas/PhotoSize",
                        "description": "Optional. Sticker thumbnail in the .WEBP or .JPG format"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the sticker, currently one of “regular”, “mask”, “custom_emoji”. The type of the sticker is independent from its format, which is determined by the fields is_animated and is_video."
                    },
                    "width": {
                        "type": "integer",
                        "description": "Sticker width"
                    }
                },
                "description": "This object represents a sticker.\n"
            },
            "StickerSet": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Sticker set name"
                    },
                    "sticker_type": {
                        "type": "string",
                        "description": "Type of stickers in the set, currently one of “regular”, “mask”, “custom_emoji”"
                    },
                    "stickers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Sticker"
                        },
                        "description": "List of all set stickers"
                    },
                    "thumbnail": {
                        "$ref": "#/components/schemas/PhotoSize",
                        "description": "Optional. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format"
                    },
                    "title": {
                        "type": "string",
                        "description": "Sticker set title"
                    }
                },
                "description": "This object represents a sticker set.\n"
            },
            "Story": {
                "type": "object",
                "properties": {
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Chat that posted the story"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for the story in the chat"
                    }
                },
                "description": "This object represents a story.\n"
            },
            "StoryArea": {
                "type": "object",
                "properties": {
                    "position": {
                        "$ref": "#/components/schemas/StoryAreaPosition",
                        "description": "Position of the area"
                    },
                    "type": {
                        "$ref": "#/components/schemas/StoryAreaType",
                        "description": "Type of the area"
                    }
                },
                "description": "Describes a clickable area on a story media.\n"
            },
            "StoryAreaPosition": {
                "type": "object",
                "properties": {
                    "corner_radius_percentage": {
                        "type": "number",
                        "description": "The radius of the rectangle corner rounding, as a percentage of the media width"
                    },
                    "height_percentage": {
                        "type": "number",
                        "description": "The height of the area's rectangle, as a percentage of the media height"
                    },
                    "rotation_angle": {
                        "type": "number",
                        "description": "The clockwise rotation angle of the rectangle, in degrees; 0-360"
                    },
                    "width_percentage": {
                        "type": "number",
                        "description": "The width of the area's rectangle, as a percentage of the media width"
                    },
                    "x_percentage": {
                        "type": "number",
                        "description": "The abscissa of the area's center, as a percentage of the media width"
                    },
                    "y_percentage": {
                        "type": "number",
                        "description": "The ordinate of the area's center, as a percentage of the media height"
                    }
                },
                "description": "Describes the position of a clickable area within a story.\n"
            },
            "StoryAreaType": {
                "type": "object",
                "description": "Describes the type of a clickable area on a story. Currently, it can be one of\n- StoryAreaTypeLocation\n- StoryAreaTypeSuggestedReaction\n- StoryAreaTypeLink\n- StoryAreaTypeWeather\n- StoryAreaTypeUniqueGift\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/StoryAreaTypeLocation"
                    },
                    {
                        "$ref": "#/components/schemas/StoryAreaTypeSuggestedReaction"
                    },
                    {
                        "$ref": "#/components/schemas/StoryAreaTypeLink"
                    },
                    {
                        "$ref": "#/components/schemas/StoryAreaTypeWeather"
                    },
                    {
                        "$ref": "#/components/schemas/StoryAreaTypeUniqueGift"
                    }
                ]
            },
            "StoryAreaTypeLink": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the area, always “link”"
                    },
                    "url": {
                        "type": "string",
                        "description": "HTTP or tg:// URL to be opened when the area is clicked"
                    }
                },
                "description": "Describes a story area pointing to an HTTP or tg:// link. Currently, a story can have up to 3 link areas.\n"
            },
            "StoryAreaTypeLocation": {
                "type": "object",
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/LocationAddress",
                        "description": "Optional. Address of the location"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Location latitude in degrees"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Location longitude in degrees"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the area, always “location”"
                    }
                },
                "description": "Describes a story area pointing to a location. Currently, a story can have up to 10 location areas.\n"
            },
            "StoryAreaTypeSuggestedReaction": {
                "type": "object",
                "properties": {
                    "is_dark": {
                        "type": "boolean",
                        "description": "Optional. Pass True if the reaction area has a dark background"
                    },
                    "is_flipped": {
                        "type": "boolean",
                        "description": "Optional. Pass True if reaction area corner is flipped"
                    },
                    "reaction_type": {
                        "$ref": "#/components/schemas/ReactionType",
                        "description": "Type of the reaction"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the area, always “suggested_reaction”"
                    }
                },
                "description": "Describes a story area pointing to a suggested reaction. Currently, a story can have up to 5 suggested reaction areas.\n"
            },
            "StoryAreaTypeUniqueGift": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique name of the gift"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the area, always “unique_gift”"
                    }
                },
                "description": "Describes a story area pointing to a unique gift. Currently, a story can have at most 1 unique gift area.\n"
            },
            "StoryAreaTypeWeather": {
                "type": "object",
                "properties": {
                    "background_color": {
                        "type": "integer",
                        "description": "A color of the area background in the ARGB format"
                    },
                    "emoji": {
                        "type": "string",
                        "description": "Emoji representing the weather"
                    },
                    "temperature": {
                        "type": "number",
                        "description": "Temperature, in degree Celsius"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the area, always “weather”"
                    }
                },
                "description": "Describes a story area containing weather information. Currently, a story can have up to 3 weather areas.\n"
            },
            "SuccessfulPayment": {
                "type": "object",
                "properties": {
                    "currency": {
                        "type": "string",
                        "description": "Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars"
                    },
                    "invoice_payload": {
                        "type": "string",
                        "description": "Bot-specified invoice payload"
                    },
                    "is_first_recurring": {
                        "type": "boolean",
                        "description": "Optional. True, if the payment is the first payment for a subscription"
                    },
                    "is_recurring": {
                        "type": "boolean",
                        "description": "Optional. True, if the payment is a recurring payment for a subscription"
                    },
                    "order_info": {
                        "$ref": "#/components/schemas/OrderInfo",
                        "description": "Optional. Order information provided by the user"
                    },
                    "provider_payment_charge_id": {
                        "type": "string",
                        "description": "Provider payment identifier"
                    },
                    "shipping_option_id": {
                        "type": "string",
                        "description": "Optional. Identifier of the shipping option chosen by the user"
                    },
                    "subscription_expiration_date": {
                        "type": "integer",
                        "description": "Optional. Expiration date of the subscription, in Unix time; for recurring payments only"
                    },
                    "telegram_payment_charge_id": {
                        "type": "string",
                        "description": "Telegram payment identifier"
                    },
                    "total_amount": {
                        "type": "integer",
                        "description": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
                    }
                },
                "description": "This object contains basic information about a successful payment. Note that if the buyer initiates a chargeback with the relevant payment provider following this transaction, the funds may be debited from your balance. This is outside of Telegram's control.\n"
            },
            "SwitchInlineQueryChosenChat": {
                "type": "object",
                "properties": {
                    "allow_bot_chats": {
                        "type": "boolean",
                        "description": "Optional. True, if private chats with bots can be chosen"
                    },
                    "allow_channel_chats": {
                        "type": "boolean",
                        "description": "Optional. True, if channel chats can be chosen"
                    },
                    "allow_group_chats": {
                        "type": "boolean",
                        "description": "Optional. True, if group and supergroup chats can be chosen"
                    },
                    "allow_user_chats": {
                        "type": "boolean",
                        "description": "Optional. True, if private chats with users can be chosen"
                    },
                    "query": {
                        "type": "string",
                        "description": "Optional. The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted"
                    }
                },
                "description": "This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query.\n"
            },
            "TextQuote": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageEntity"
                        },
                        "description": "Optional. Special entities that appear in the quote. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are kept in quotes."
                    },
                    "is_manual": {
                        "type": "boolean",
                        "description": "Optional. True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server."
                    },
                    "position": {
                        "type": "integer",
                        "description": "Approximate quote position in the original message in UTF-16 code units as specified by the sender"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of the quoted part of a message that is replied to by the given message"
                    }
                },
                "description": "This object contains information about the quoted part of a message that is replied to by the given message.\n"
            },
            "TransactionPartner": {
                "type": "object",
                "description": "This object describes the source of a transaction, or its recipient for outgoing transactions. Currently, it can be one of\n- TransactionPartnerUser\n- TransactionPartnerChat\n- TransactionPartnerAffiliateProgram\n- TransactionPartnerFragment\n- TransactionPartnerTelegramAds\n- TransactionPartnerTelegramApi\n- TransactionPartnerOther\n",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/TransactionPartnerUser"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPartnerChat"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPartnerAffiliateProgram"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPartnerFragment"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPartnerTelegramAds"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPartnerTelegramApi"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionPartnerOther"
                    }
                ]
            },
            "TransactionPartnerAffiliateProgram": {
                "type": "object",
                "properties": {
                    "commission_per_mille": {
                        "type": "integer",
                        "description": "The number of Telegram Stars received by the bot for each 1000 Telegram Stars received by the affiliate program sponsor from referred users"
                    },
                    "sponsor_user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Optional. Information about the bot that sponsored the affiliate program"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the transaction partner, always “affiliate_program”"
                    }
                },
                "description": "Describes the affiliate program that issued the affiliate commission received via this transaction.\n"
            },
            "TransactionPartnerChat": {
                "type": "object",
                "properties": {
                    "chat": {
                        "$ref": "#/components/schemas/Chat",
                        "description": "Information about the chat"
                    },
                    "gift": {
                        "$ref": "#/components/schemas/Gift",
                        "description": "Optional. The gift sent to the chat by the bot"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the transaction partner, always “chat”"
                    }
                },
                "description": "Describes a transaction with a chat.\n"
            },
            "TransactionPartnerFragment": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the transaction partner, always “fragment”"
                    },
                    "withdrawal_state": {
                        "$ref": "#/components/schemas/RevenueWithdrawalState",
                        "description": "Optional. State of the transaction if the transaction is outgoing"
                    }
                },
                "description": "Describes a withdrawal transaction with Fragment.\n"
            },
            "TransactionPartnerOther": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the transaction partner, always “other”"
                    }
                },
                "description": "Describes a transaction with an unknown source or recipient.\n"
            },
            "TransactionPartnerTelegramAds": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the transaction partner, always “telegram_ads”"
                    }
                },
                "description": "Describes a withdrawal transaction to the Telegram Ads platform.\n"
            },
            "TransactionPartnerTelegramApi": {
                "type": "object",
                "properties": {
                    "request_count": {
                        "type": "integer",
                        "description": "The number of successful requests that exceeded regular limits and were therefore billed"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the transaction partner, always “telegram_api”"
                    }
                },
                "description": "Describes a transaction with payment for paid broadcasting.\n"
            },
            "TransactionPartnerUser": {
                "type": "object",
                "properties": {
                    "affiliate": {
                        "$ref": "#/components/schemas/AffiliateInfo",
                        "description": "Optional. Information about the affiliate that received a commission via this transaction. Can be available only for “invoice_payment” and “paid_media_payment” transactions."
                    },
                    "gift": {
                        "$ref": "#/components/schemas/Gift",
                        "description": "Optional. The gift sent to the user by the bot; for “gift_purchase” transactions only"
                    },
                    "invoice_payload": {
                        "type": "string",
                        "description": "Optional. Bot-specified invoice payload. Can be available only for “invoice_payment” transactions."
                    },
                    "paid_media": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaidMedia"
                        },
                        "description": "Optional. Information about the paid media bought by the user; for “paid_media_payment” transactions only"
                    },
                    "paid_media_payload": {
                        "type": "string",
                        "description": "Optional. Bot-specified paid media payload. Can be available only for “paid_media_payment” transactions."
                    },
                    "premium_subscription_duration": {
                        "type": "integer",
                        "description": "Optional. Number of months the gifted Telegram Premium subscription will be active for; for “premium_purchase” transactions only"
                    },
                    "subscription_period": {
                        "type": "integer",
                        "description": "Optional. The duration of the paid subscription. Can be available only for “invoice_payment” transactions."
                    },
                    "transaction_type": {
                        "type": "string",
                        "description": "Type of the transaction, currently one of “invoice_payment” for payments via invoices, “paid_media_payment” for payments for paid media, “gift_purchase” for gifts sent by the bot, “premium_purchase” for Telegram Premium subscriptions gifted by the bot, “business_account_transfer” for direct transfers from managed business accounts"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the transaction partner, always “user”"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User",
                        "description": "Information about the user"
                    }
                },
                "description": "Describes a transaction with a user.\n"
            },
            "UniqueGift": {
                "type": "object",
                "properties": {
                    "backdrop": {
                        "$ref": "#/components/schemas/UniqueGiftBackdrop",
                        "description": "Backdrop of the gift"
                    },
                    "base_name": {
                        "type": "string",
                        "description": "Human-readable name of the regular gift from which this unique gift was upgraded"
                    },
                    "model": {
                        "$ref": "#/components/schemas/UniqueGiftModel",
                        "description": "Model of the gift"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique name of the gift. This name can be used in https://t.me/nft/... links and story areas"
                    },
                    "number": {
                        "type": "integer",
                        "description": "Unique number of the upgraded gift among gifts upgraded from the same regular gift"
                    },
                    "symbol": {
                        "$ref": "#/components/schemas/UniqueGiftSymbol",
                        "description": "Symbol of the gift"
                    }
                },
                "description": "This object describes a unique gift that was upgraded from a regular gift.\n"
            },
            "UniqueGiftBackdrop": {
                "type": "object",
                "properties": {
                    "colors": {
                        "$ref": "#/components/schemas/UniqueGiftBackdropColors",
                        "description": "Colors of the backdrop"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the backdrop"
                    },
                    "rarity_per_mille": {
                        "type": "integer",
                        "description": "The number of unique gifts that receive this backdrop for every 1000 gifts upgraded"
                    }
                },
                "description": "This object describes the backdrop of a unique gift.\n"
            },
            "UniqueGiftBackdropColors": {
                "type": "object",
                "properties": {
                    "center_color": {
                        "type": "integer",
                        "description": "The color in the center of the backdrop in RGB format"
                    },
                    "edge_color": {
                        "type": "integer",
                        "description": "The color on the edges of the backdrop in RGB format"
                    },
                    "symbol_color": {
                        "type": "integer",
                        "description": "The color to be applied to the symbol in RGB format"
                    },
                    "text_color": {
                        "type": "integer",
                        "description": "The color for the text on the backdrop in RGB format"
                    }
                },
                "description": "This object describes the colors of the backdrop of a unique gift.\n"
            },
            "UniqueGiftInfo": {
                "type": "object",
                "properties": {
                    "gift": {
                        "$ref": "#/components/schemas/UniqueGift",
                        "description": "Information about the gift"
                    },
                    "last_resale_star_count": {
                        "type": "integer",
                        "description": "Optional. For gifts bought from other users, the price paid for the gift"
                    },
                    "next_transfer_date": {
                        "type": "integer",
                        "description": "Optional. Point in time (Unix timestamp) when the gift can be transferred. If it is in the past, then the gift can be transferred now"
                    },
                    "origin": {
                        "type": "string",
                        "description": "Origin of the gift. Currently, either “upgrade” for gifts upgraded from regular gifts, “transfer” for gifts transferred from other users or channels, or “resale” for gifts bought from other users"
                    },
                    "owned_gift_id": {
                        "type": "string",
                        "description": "Optional. Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts"
                    },
                    "transfer_star_count": {
                        "type": "integer",
                        "description": "Optional. Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift"
                    }
                },
                "description": "Describes a service message about a unique gift that was sent or received.\n"
            },
            "UniqueGiftModel": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the model"
                    },
                    "rarity_per_mille": {
                        "type": "integer",
                        "description": "The number of unique gifts that receive this model for every 1000 gifts upgraded"
                    },
                    "sticker": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "The sticker that represents the unique gift"
                    }
                },
                "description": "This object describes the model of a unique gift.\n"
            },
            "UniqueGiftSymbol": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the symbol"
                    },
                    "rarity_per_mille": {
                        "type": "integer",
                        "description": "The number of unique gifts that receive this model for every 1000 gifts upgraded"
                    },
                    "sticker": {
                        "$ref": "#/components/schemas/Sticker",
                        "description": "The sticker that represents the unique gift"
                    }
                },
                "description": "This object describes the symbol shown on the pattern of a unique gift.\n"
            },
            "Update": {
                "type": "object",
                "properties": {
                    "business_connection": {
                        "$ref": "#/components/schemas/BusinessConnection",
                        "description": "Optional. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot"
                    },
                    "business_message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. New message from a connected business account"
                    },
                    "callback_query": {
                        "$ref": "#/components/schemas/CallbackQuery",
                        "description": "Optional. New incoming callback query"
                    },
                    "channel_post": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. New incoming channel post of any kind - text, photo, sticker, etc."
                    },
                    "chat_boost": {
                        "$ref": "#/components/schemas/ChatBoostUpdated",
                        "description": "Optional. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates."
                    },
                    "chat_join_request": {
                        "$ref": "#/components/schemas/ChatJoinRequest",
                        "description": "Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates."
                    },
                    "chat_member": {
                        "$ref": "#/components/schemas/ChatMemberUpdated",
                        "description": "Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \"chat_member\" in the list of allowed_updates to receive these updates."
                    },
                    "chosen_inline_result": {
                        "$ref": "#/components/schemas/ChosenInlineResult",
                        "description": "Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot."
                    },
                    "deleted_business_messages": {
                        "$ref": "#/components/schemas/BusinessMessagesDeleted",
                        "description": "Optional. Messages were deleted from a connected business account"
                    },
                    "edited_business_message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. New version of a message from a connected business account"
                    },
                    "edited_channel_post": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot."
                    },
                    "edited_message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot."
                    },
                    "inline_query": {
                        "$ref": "#/components/schemas/InlineQuery",
                        "description": "Optional. New incoming inline query"
                    },
                    "message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "Optional. New incoming message of any kind - text, photo, sticker, etc."
                    },
                    "message_reaction": {
                        "$ref": "#/components/schemas/MessageReactionUpdated",
                        "description": "Optional. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify \"message_reaction\" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots."
                    },
                    "message_reaction_count": {
                        "$ref": "#/components/schemas/MessageReactionCountUpdated",
                        "description": "Optional. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify \"message_reaction_count\" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes."
                    },
                    "my_chat_member": {
                        "$ref": "#/components/schemas/ChatMemberUpdated",
                        "description": "Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user."
                    },
                    "poll": {
                        "$ref": "#/components/schemas/Poll",
                        "description": "Optional. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot"
                    },
                    "poll_answer": {
                        "$ref": "#/components/schemas/PollAnswer",
                        "description": "Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself."
                    },
                    "pre_checkout_query": {
                        "$ref": "#/components/schemas/PreCheckoutQuery",
                        "description": "Optional. New incoming pre-checkout query. Contains full information about checkout"
                    },
                    "purchased_paid_media": {
                        "$ref": "#/components/schemas/PaidMediaPurchased",
                        "description": "Optional. A user purchased paid media with a non-empty payload sent by the bot in a non-channel chat"
                    },
                    "removed_chat_boost": {
                        "$ref": "#/components/schemas/ChatBoostRemoved",
                        "description": "Optional. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates."
                    },
                    "shipping_query": {
                        "$ref": "#/components/schemas/ShippingQuery",
                        "description": "Optional. New incoming shipping query. Only for invoices with flexible price"
                    },
                    "update_id": {
                        "type": "integer",
                        "description": "The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you're using webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially."
                    }
                },
                "description": "This object represents an incoming update.At most one of the optional parameters can be present in any given update.\n"
            },
            "User": {
                "type": "object",
                "properties": {
                    "added_to_attachment_menu": {
                        "type": "boolean",
                        "description": "Optional. True, if this user added the bot to the attachment menu"
                    },
                    "can_connect_to_business": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in getMe."
                    },
                    "can_join_groups": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot can be invited to groups. Returned only in getMe."
                    },
                    "can_read_all_group_messages": {
                        "type": "boolean",
                        "description": "Optional. True, if privacy mode is disabled for the bot. Returned only in getMe."
                    },
                    "first_name": {
                        "type": "string",
                        "description": "User's or bot's first name"
                    },
                    "has_main_web_app": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot has a main Web App. Returned only in getMe."
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier."
                    },
                    "is_bot": {
                        "type": "boolean",
                        "description": "True, if this user is a bot"
                    },
                    "is_premium": {
                        "type": "boolean",
                        "description": "Optional. True, if this user is a Telegram Premium user"
                    },
                    "language_code": {
                        "type": "string",
                        "description": "Optional. IETF language tag of the user's language"
                    },
                    "last_name": {
                        "type": "string",
                        "description": "Optional. User's or bot's last name"
                    },
                    "supports_inline_queries": {
                        "type": "boolean",
                        "description": "Optional. True, if the bot supports inline queries. Returned only in getMe."
                    },
                    "username": {
                        "type": "string",
                        "description": "Optional. User's or bot's username"
                    }
                },
                "description": "This object represents a Telegram user or bot.\n"
            },
            "UserChatBoosts": {
                "type": "object",
                "properties": {
                    "boosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChatBoost"
                        },
                        "description": "The list of boosts added to the chat by the user"
                    }
                },
                "description": "This object represents a list of boosts added to a chat by a user.\n"
            },
            "UserProfilePhotos": {
                "type": "object",
                "properties": {
                    "photos": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/PhotoSize"
                            }
                        },
                        "description": "Requested profile pictures (in up to 4 sizes each)"
                    },
                    "total_count": {
                        "type": "integer",
                        "description": "Total number of profile pictures the target user has"
                    }
                },
                "description": "This object represent a user's profile pictures.\n"
            },
            "UsersShared": {
                "type": "object",
                "properties": {
                    "request_id": {
                        "type": "integer",
                        "description": "Identifier of the request"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SharedUser"
                        },
                        "description": "Information about users shared with the bot."
                    }
                },
                "description": "This object contains information about the users whose identifiers were shared with the bot using a KeyboardButtonRequestUsers button.\n"
            },
            "Venue": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Address of the venue"
                    },
                    "foursquare_id": {
                        "type": "string",
                        "description": "Optional. Foursquare identifier of the venue"
                    },
                    "foursquare_type": {
                        "type": "string",
                        "description": "Optional. Foursquare type of the venue. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)"
                    },
                    "google_place_id": {
                        "type": "string",
                        "description": "Optional. Google Places identifier of the venue"
                    },
                    "google_place_type": {
                        "type": "string",
                        "description": "Optional. Google Places type of the venue. (See supported types.)"
                    },
                    "location": {
                        "$ref": "#/components/schemas/Location",
                        "description": "Venue location. Can't be a live location"
                    },
                    "title": {
                        "type": "string",
                        "description": "Name of the venue"
                    }
                },
                "description": "This object represents a venue.\n"
            },
            "Video": {
                "type": "object",
                "properties": {
                    "cover": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PhotoSize"
                        },
                        "description": "Optional. Available sizes of the cover of the video in the message"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Duration of the video in seconds as defined by the sender"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_name": {
                        "type": "string",
                        "description": "Optional. Original filename as defined by the sender"
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value."
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    },
                    "height": {
                        "type": "integer",
                        "description": "Video height as defined by the sender"
                    },
                    "mime_type": {
                        "type": "string",
                        "description": "Optional. MIME type of the file as defined by the sender"
                    },
                    "start_timestamp": {
                        "type": "integer",
                        "description": "Optional. Timestamp in seconds from which the video will play in the message"
                    },
                    "thumbnail": {
                        "$ref": "#/components/schemas/PhotoSize",
                        "description": "Optional. Video thumbnail"
                    },
                    "width": {
                        "type": "integer",
                        "description": "Video width as defined by the sender"
                    }
                },
                "description": "This object represents a video file.\n"
            },
            "VideoChatEnded": {
                "type": "object",
                "properties": {
                    "duration": {
                        "type": "integer",
                        "description": "Video chat duration in seconds"
                    }
                },
                "description": "This object represents a service message about a video chat ended in the chat.\n"
            },
            "VideoChatParticipantsInvited": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "description": "New members that were invited to the video chat"
                    }
                },
                "description": "This object represents a service message about new members invited to a video chat.\n"
            },
            "VideoChatScheduled": {
                "type": "object",
                "properties": {
                    "start_date": {
                        "type": "integer",
                        "description": "Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator"
                    }
                },
                "description": "This object represents a service message about a video chat scheduled in the chat.\n"
            },
            "VideoChatStarted": {
                "type": "object",
                "description": "This object represents a service message about a video chat started in the chat. Currently holds no information.\n"
            },
            "VideoNote": {
                "type": "object",
                "properties": {
                    "duration": {
                        "type": "integer",
                        "description": "Duration of the video in seconds as defined by the sender"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "Optional. File size in bytes"
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    },
                    "length": {
                        "type": "integer",
                        "description": "Video width and height (diameter of the video message) as defined by the sender"
                    },
                    "thumbnail": {
                        "$ref": "#/components/schemas/PhotoSize",
                        "description": "Optional. Video thumbnail"
                    }
                },
                "description": "This object represents a video message (available in Telegram apps as of v.4.0).\n"
            },
            "Voice": {
                "type": "object",
                "properties": {
                    "duration": {
                        "type": "integer",
                        "description": "Duration of the audio in seconds as defined by the sender"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "Identifier for this file, which can be used to download or reuse the file"
                    },
                    "file_size": {
                        "type": "integer",
                        "description": "Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value."
                    },
                    "file_unique_id": {
                        "type": "string",
                        "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file."
                    },
                    "mime_type": {
                        "type": "string",
                        "description": "Optional. MIME type of the file as defined by the sender"
                    }
                },
                "description": "This object represents a voice note.\n"
            },
            "WebAppData": {
                "type": "object",
                "properties": {
                    "button_text": {
                        "type": "string",
                        "description": "Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field."
                    },
                    "data": {
                        "type": "string",
                        "description": "The data. Be aware that a bad client can send arbitrary data in this field."
                    }
                },
                "description": "Describes data sent from a Web App to the bot.\n"
            },
            "WebAppInfo": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps"
                    }
                },
                "description": "Describes a Web App.\n"
            },
            "WebhookInfo": {
                "type": "object",
                "properties": {
                    "allowed_updates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Optional. A list of update types the bot is subscribed to. Defaults to all update types except chat_member"
                    },
                    "has_custom_certificate": {
                        "type": "boolean",
                        "description": "True, if a custom certificate was provided for webhook certificate checks"
                    },
                    "ip_address": {
                        "type": "string",
                        "description": "Optional. Currently used webhook IP address"
                    },
                    "last_error_date": {
                        "type": "integer",
                        "description": "Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook"
                    },
                    "last_error_message": {
                        "type": "string",
                        "description": "Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook"
                    },
                    "last_synchronization_error_date": {
                        "type": "integer",
                        "description": "Optional. Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters"
                    },
                    "max_connections": {
                        "type": "integer",
                        "description": "Optional. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery"
                    },
                    "pending_update_count": {
                        "type": "integer",
                        "description": "Number of updates awaiting delivery"
                    },
                    "url": {
                        "type": "string",
                        "description": "Webhook URL, may be empty if webhook is not set up"
                    }
                },
                "description": "Describes the current status of a webhook.\n"
            },
            "WriteAccessAllowed": {
                "type": "object",
                "properties": {
                    "from_attachment_menu": {
                        "type": "boolean",
                        "description": "Optional. True, if the access was granted when the bot was added to the attachment or side menu"
                    },
                    "from_request": {
                        "type": "boolean",
                        "description": "Optional. True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess"
                    },
                    "web_app_name": {
                        "type": "string",
                        "description": "Optional. Name of the Web App, if the access was granted when the Web App was launched from a link"
                    }
                },
                "description": "This object represents a service message about a user allowing a bot to write messages after adding it to the attachment menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.\n"
            }
        }
    }
}